// Generated by rstantools.  Do not edit by hand.

/*
    rstanexample is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanexample is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanexample.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_stan_program_default_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 443> locations_array__ =
  {" (found before start of program)",
  " (in 'stan_program_default', line 282, column 2 to column 24)",
  " (in 'stan_program_default', line 284, column 2 to column 16)",
  " (in 'stan_program_default', line 286, column 2 to column 34)",
  " (in 'stan_program_default', line 289, column 2 to column 38)",
  " (in 'stan_program_default', line 290, column 2 to column 42)",
  " (in 'stan_program_default', line 291, column 2 to column 38)",
  " (in 'stan_program_default', line 292, column 2 to column 38)",
  " (in 'stan_program_default', line 293, column 2 to column 28)",
  " (in 'stan_program_default', line 299, column 2 to column 44)",
  " (in 'stan_program_default', line 300, column 2 to column 44)",
  " (in 'stan_program_default', line 302, column 2 to column 44)",
  " (in 'stan_program_default', line 303, column 2 to column 39)",
  " (in 'stan_program_default', line 304, column 2 to column 56)",
  " (in 'stan_program_default', line 307, column 2 to column 31)",
  " (in 'stan_program_default', line 308, column 2 to column 31)",
  " (in 'stan_program_default', line 311, column 2 to column 22)",
  " (in 'stan_program_default', line 323, column 2 to column 37)",
  " (in 'stan_program_default', line 324, column 2 to column 44)",
  " (in 'stan_program_default', line 325, column 2 to column 33)",
  " (in 'stan_program_default', line 328, column 2 to column 16)",
  " (in 'stan_program_default', line 329, column 2 to column 39)",
  " (in 'stan_program_default', line 330, column 2 to column 49)",
  " (in 'stan_program_default', line 331, column 2 to column 48)",
  " (in 'stan_program_default', line 332, column 2 to column 50)",
  " (in 'stan_program_default', line 333, column 2 to column 48)",
  " (in 'stan_program_default', line 341, column 2 to column 29)",
  " (in 'stan_program_default', line 342, column 2 to column 28)",
  " (in 'stan_program_default', line 343, column 2 to column 26)",
  " (in 'stan_program_default', line 344, column 2 to column 43)",
  " (in 'stan_program_default', line 345, column 2 to column 43)",
  " (in 'stan_program_default', line 347, column 2 to column 34)",
  " (in 'stan_program_default', line 350, column 2 to column 36)",
  " (in 'stan_program_default', line 351, column 2 to column 36)",
  " (in 'stan_program_default', line 357, column 2 to column 41)",
  " (in 'stan_program_default', line 358, column 2 to column 36)",
  " (in 'stan_program_default', line 359, column 2 to column 36)",
  " (in 'stan_program_default', line 362, column 2 to column 38)",
  " (in 'stan_program_default', line 363, column 2 to column 38)",
  " (in 'stan_program_default', line 366, column 2 to column 20)",
  " (in 'stan_program_default', line 371, column 2 to column 34)",
  " (in 'stan_program_default', line 372, column 2 to column 29)",
  " (in 'stan_program_default', line 373, column 2 to column 29)",
  " (in 'stan_program_default', line 378, column 2 to column 33)",
  " (in 'stan_program_default', line 379, column 2 to column 47)",
  " (in 'stan_program_default', line 380, column 2 to column 39)",
  " (in 'stan_program_default', line 385, column 2 to column 33)",
  " (in 'stan_program_default', line 386, column 2 to column 33)",
  " (in 'stan_program_default', line 387, column 2 to column 33)",
  " (in 'stan_program_default', line 391, column 2 to column 32)",
  " (in 'stan_program_default', line 392, column 2 to column 42)",
  " (in 'stan_program_default', line 397, column 2 to column 35)",
  " (in 'stan_program_default', line 398, column 2 to column 46)",
  " (in 'stan_program_default', line 399, column 2 to column 36)",
  " (in 'stan_program_default', line 403, column 2 to column 39)",
  " (in 'stan_program_default', line 404, column 2 to column 50)",
  " (in 'stan_program_default', line 405, column 2 to column 40)",
  " (in 'stan_program_default', line 408, column 2 to column 15)",
  " (in 'stan_program_default', line 409, column 2 to column 16)",
  " (in 'stan_program_default', line 733, column 4 to column 44)",
  " (in 'stan_program_default', line 734, column 2 to column 32)",
  " (in 'stan_program_default', line 735, column 2 to column 20)",
  " (in 'stan_program_default', line 736, column 2 to column 46)",
  " (in 'stan_program_default', line 737, column 2 to column 52)",
  " (in 'stan_program_default', line 738, column 2 to column 56)",
  " (in 'stan_program_default', line 739, column 2 to column 62)",
  " (in 'stan_program_default', line 740, column 2 to column 52)",
  " (in 'stan_program_default', line 741, column 2 to column 58)",
  " (in 'stan_program_default', line 742, column 2 to column 45)",
  " (in 'stan_program_default', line 743, column 2 to column 47)",
  " (in 'stan_program_default', line 744, column 2 to column 33)",
  " (in 'stan_program_default', line 745, column 2 to column 44)",
  " (in 'stan_program_default', line 746, column 2 to column 40)",
  " (in 'stan_program_default', line 749, column 2 to column 35)",
  " (in 'stan_program_default', line 751, column 2 to column 36)",
  " (in 'stan_program_default', line 412, column 2 to column 77)",
  " (in 'stan_program_default', line 415, column 2 to column 74)",
  " (in 'stan_program_default', line 416, column 2 to column 69)",
  " (in 'stan_program_default', line 417, column 2 to column 69)",
  " (in 'stan_program_default', line 414, column 26 to line 418, column 3)",
  " (in 'stan_program_default', line 414, column 2 to line 418, column 3)",
  " (in 'stan_program_default', line 421, column 2 to column 71)",
  " (in 'stan_program_default', line 423, column 2 to column 53)",
  " (in 'stan_program_default', line 424, column 2 to column 53)",
  " (in 'stan_program_default', line 434, column 11 to column 22)",
  " (in 'stan_program_default', line 434, column 4 to column 41)",
  " (in 'stan_program_default', line 435, column 11 to column 22)",
  " (in 'stan_program_default', line 435, column 4 to column 41)",
  " (in 'stan_program_default', line 437, column 6 to column 103)",
  " (in 'stan_program_default', line 438, column 6 to column 103)",
  " (in 'stan_program_default', line 436, column 29 to line 439, column 5)",
  " (in 'stan_program_default', line 436, column 4 to line 439, column 5)",
  " (in 'stan_program_default', line 444, column 4 to column 83)",
  " (in 'stan_program_default', line 445, column 4 to column 83)",
  " (in 'stan_program_default', line 443, column 25 to line 446, column 5)",
  " (in 'stan_program_default', line 443, column 4 to line 446, column 5)",
  " (in 'stan_program_default', line 431, column 2 to line 447, column 3)",
  " (in 'stan_program_default', line 452, column 2 to column 60)",
  " (in 'stan_program_default', line 460, column 2 to column 37)",
  " (in 'stan_program_default', line 461, column 2 to column 39)",
  " (in 'stan_program_default', line 462, column 2 to column 57)",
  " (in 'stan_program_default', line 471, column 4 to column 58)",
  " (in 'stan_program_default', line 468, column 9 to line 472, column 3)",
  " (in 'stan_program_default', line 467, column 4 to column 67)",
  " (in 'stan_program_default', line 463, column 24 to line 468, column 3)",
  " (in 'stan_program_default', line 463, column 2 to line 472, column 3)",
  " (in 'stan_program_default', line 473, column 2 to column 64)",
  " (in 'stan_program_default', line 480, column 7 to column 71)",
  " (in 'stan_program_default', line 479, column 12 to line 481, column 4)",
  " (in 'stan_program_default', line 479, column 3 to line 481, column 4)",
  " (in 'stan_program_default', line 484, column 6 to column 30)",
  " (in 'stan_program_default', line 482, column 33 to line 485, column 5)",
  " (in 'stan_program_default', line 482, column 4 to line 485, column 5)",
  " (in 'stan_program_default', line 486, column 4 to column 61)",
  " (in 'stan_program_default', line 487, column 4 to column 49)",
  " (in 'stan_program_default', line 488, column 4 to column 75)",
  " (in 'stan_program_default', line 489, column 4 to column 43)",
  " (in 'stan_program_default', line 506, column 0 to column 64)",
  " (in 'stan_program_default', line 507, column 0 to column 35)",
  " (in 'stan_program_default', line 508, column 0 to column 115)",
  " (in 'stan_program_default', line 503, column 11 to line 509, column 5)",
  " (in 'stan_program_default', line 500, column 4 to column 114)",
  " (in 'stan_program_default', line 501, column 4 to column 145)",
  " (in 'stan_program_default', line 502, column 4 to column 144)",
  " (in 'stan_program_default', line 493, column 26 to line 503, column 5)",
  " (in 'stan_program_default', line 493, column 4 to line 509, column 5)",
  " (in 'stan_program_default', line 516, column 4 to column 129)",
  " (in 'stan_program_default', line 478, column 26 to line 528, column 3)",
  " (in 'stan_program_default', line 478, column 2 to line 528, column 3)",
  " (in 'stan_program_default', line 529, column 2 to column 19)",
  " (in 'stan_program_default', line 531, column 2 to line 534, column 35)",
  " (in 'stan_program_default', line 536, column 2 to line 538, column 35)",
  " (in 'stan_program_default', line 546, column 2 to line 547, column 59)",
  " (in 'stan_program_default', line 548, column 2 to column 66)",
  " (in 'stan_program_default', line 550, column 2 to column 76)",
  " (in 'stan_program_default', line 558, column 2 to line 561, column 4)",
  " (in 'stan_program_default', line 566, column 2 to column 85)",
  " (in 'stan_program_default', line 570, column 2 to line 573, column 4)",
  " (in 'stan_program_default', line 575, column 2 to column 84)",
  " (in 'stan_program_default', line 578, column 2 to column 84)",
  " (in 'stan_program_default', line 585, column 2 to line 588, column 4)",
  " (in 'stan_program_default', line 590, column 2 to column 71)",
  " (in 'stan_program_default', line 591, column 2 to column 48)",
  " (in 'stan_program_default', line 603, column 4 to column 56)",
  " (in 'stan_program_default', line 601, column 4 to column 55)",
  " (in 'stan_program_default', line 600, column 2 to line 603, column 56)",
  " (in 'stan_program_default', line 607, column 0 to column 43)",
  " (in 'stan_program_default', line 612, column 4 to column 67)",
  " (in 'stan_program_default', line 610, column 4 to column 66)",
  " (in 'stan_program_default', line 609, column 2 to line 612, column 67)",
  " (in 'stan_program_default', line 625, column 8 to column 46)",
  " (in 'stan_program_default', line 626, column 8 to column 68)",
  " (in 'stan_program_default', line 627, column 8 to column 48)",
  " (in 'stan_program_default', line 624, column 26 to line 628, column 3)",
  " (in 'stan_program_default', line 624, column 2 to line 628, column 3)",
  " (in 'stan_program_default', line 630, column 2 to column 36)",
  " (in 'stan_program_default', line 631, column 2 to column 37)",
  " (in 'stan_program_default', line 753, column 2 to column 51)",
  " (in 'stan_program_default', line 754, column 2 to column 60)",
  " (in 'stan_program_default', line 757, column 2 to column 59)",
  " (in 'stan_program_default', line 758, column 4 to column 104)",
  " (in 'stan_program_default', line 756, column 13 to line 759, column 1)",
  " (in 'stan_program_default', line 756, column 4 to line 759, column 1)",
  " (in 'stan_program_default', line 761, column 2 to column 19)",
  " (in 'stan_program_default', line 760, column 20 to line 762, column 1)",
  " (in 'stan_program_default', line 760, column 0 to line 762, column 1)",
  " (in 'stan_program_default', line 764, column 2 to column 49)",
  " (in 'stan_program_default', line 763, column 47 to line 765, column 1)",
  " (in 'stan_program_default', line 763, column 0 to line 765, column 1)",
  " (in 'stan_program_default', line 766, column 4 to column 125)",
  " (in 'stan_program_default', line 755, column 25 to line 767, column 1)",
  " (in 'stan_program_default', line 755, column 2 to line 767, column 1)",
  " (in 'stan_program_default', line 770, column 2 to column 119)",
  " (in 'stan_program_default', line 779, column 2 to column 45)",
  " (in 'stan_program_default', line 780, column 2 to column 59)",
  " (in 'stan_program_default', line 783, column 4 to line 785, column 58)",
  " (in 'stan_program_default', line 782, column 2 to line 785, column 58)",
  " (in 'stan_program_default', line 789, column 4 to line 790, column 64)",
  " (in 'stan_program_default', line 788, column 2 to line 790, column 64)",
  " (in 'stan_program_default', line 795, column 2 to column 58)",
  " (in 'stan_program_default', line 637, column 2 to column 78)",
  " (in 'stan_program_default', line 639, column 2 to column 50)",
  " (in 'stan_program_default', line 640, column 2 to column 57)",
  " (in 'stan_program_default', line 641, column 2 to column 55)",
  " (in 'stan_program_default', line 642, column 2 to column 55)",
  " (in 'stan_program_default', line 645, column 2 to column 62)",
  " (in 'stan_program_default', line 646, column 2 to column 74)",
  " (in 'stan_program_default', line 647, column 2 to column 62)",
  " (in 'stan_program_default', line 648, column 2 to column 62)",
  " (in 'stan_program_default', line 649, column 2 to column 60)",
  " (in 'stan_program_default', line 651, column 2 to column 62)",
  " (in 'stan_program_default', line 654, column 2 to column 80)",
  " (in 'stan_program_default', line 655, column 2 to column 75)",
  " (in 'stan_program_default', line 656, column 2 to column 65)",
  " (in 'stan_program_default', line 658, column 2 to column 72)",
  " (in 'stan_program_default', line 659, column 2 to column 72)",
  " (in 'stan_program_default', line 661, column 2 to column 32)",
  " (in 'stan_program_default', line 662, column 2 to column 32)",
  " (in 'stan_program_default', line 665, column 2 to column 41)",
  " (in 'stan_program_default', line 679, column 8 to column 77)",
  " (in 'stan_program_default', line 678, column 6 to line 679, column 77)",
  " (in 'stan_program_default', line 681, column 8 to column 88)",
  " (in 'stan_program_default', line 680, column 6 to line 681, column 88)",
  " (in 'stan_program_default', line 684, column 6 to column 87)",
  " (in 'stan_program_default', line 685, column 6 to column 101)",
  " (in 'stan_program_default', line 672, column 24 to line 686, column 5)",
  " (in 'stan_program_default', line 672, column 4 to line 686, column 5)",
  " (in 'stan_program_default', line 670, column 24 to line 687, column 3)",
  " (in 'stan_program_default', line 670, column 2 to line 687, column 3)",
  " (in 'stan_program_default', line 689, column 4 to column 50)",
  " (in 'stan_program_default', line 688, column 2 to line 689, column 50)",
  " (in 'stan_program_default', line 691, column 4 to column 61)",
  " (in 'stan_program_default', line 690, column 2 to line 691, column 61)",
  " (in 'stan_program_default', line 711, column 2 to line 718, column 5)",
  " (in 'stan_program_default', line 721, column 2 to line 728, column 4)",
  " (in 'stan_program_default', line 38, column 2 to column 23)",
  " (in 'stan_program_default', line 39, column 2 to column 30)",
  " (in 'stan_program_default', line 40, column 2 to column 25)",
  " (in 'stan_program_default', line 43, column 23 to column 30)",
  " (in 'stan_program_default', line 43, column 2 to column 32)",
  " (in 'stan_program_default', line 44, column 24 to column 31)",
  " (in 'stan_program_default', line 44, column 2 to column 33)",
  " (in 'stan_program_default', line 45, column 23 to column 30)",
  " (in 'stan_program_default', line 45, column 2 to column 32)",
  " (in 'stan_program_default', line 46, column 18 to column 25)",
  " (in 'stan_program_default', line 46, column 2 to column 37)",
  " (in 'stan_program_default', line 47, column 2 to column 25)",
  " (in 'stan_program_default', line 48, column 2 to column 36)",
  " (in 'stan_program_default', line 49, column 2 to column 39)",
  " (in 'stan_program_default', line 50, column 2 to column 25)",
  " (in 'stan_program_default', line 51, column 18 to column 27)",
  " (in 'stan_program_default', line 51, column 2 to column 37)",
  " (in 'stan_program_default', line 53, column 18 to column 40)",
  " (in 'stan_program_default', line 53, column 2 to column 54)",
  " (in 'stan_program_default', line 54, column 2 to column 34)",
  " (in 'stan_program_default', line 55, column 2 to column 34)",
  " (in 'stan_program_default', line 56, column 2 to column 34)",
  " (in 'stan_program_default', line 57, column 2 to column 34)",
  " (in 'stan_program_default', line 58, column 2 to column 34)",
  " (in 'stan_program_default', line 59, column 2 to column 34)",
  " (in 'stan_program_default', line 60, column 2 to column 30)",
  " (in 'stan_program_default', line 61, column 2 to column 33)",
  " (in 'stan_program_default', line 62, column 2 to column 33)",
  " (in 'stan_program_default', line 63, column 2 to column 34)",
  " (in 'stan_program_default', line 64, column 2 to column 34)",
  " (in 'stan_program_default', line 67, column 2 to column 28)",
  " (in 'stan_program_default', line 69, column 9 to column 31)",
  " (in 'stan_program_default', line 69, column 32 to column 44)",
  " (in 'stan_program_default', line 69, column 2 to column 59)",
  " (in 'stan_program_default', line 70, column 2 to column 28)",
  " (in 'stan_program_default', line 72, column 9 to column 31)",
  " (in 'stan_program_default', line 72, column 32 to column 44)",
  " (in 'stan_program_default', line 72, column 2 to column 59)",
  " (in 'stan_program_default', line 75, column 2 to column 35)",
  " (in 'stan_program_default', line 76, column 2 to column 35)",
  " (in 'stan_program_default', line 77, column 2 to column 35)",
  " (in 'stan_program_default', line 78, column 2 to column 35)",
  " (in 'stan_program_default', line 79, column 2 to column 35)",
  " (in 'stan_program_default', line 80, column 2 to column 35)",
  " (in 'stan_program_default', line 81, column 2 to column 35)",
  " (in 'stan_program_default', line 82, column 2 to column 35)",
  " (in 'stan_program_default', line 84, column 2 to column 35)",
  " (in 'stan_program_default', line 85, column 2 to column 35)",
  " (in 'stan_program_default', line 86, column 2 to column 35)",
  " (in 'stan_program_default', line 87, column 2 to column 35)",
  " (in 'stan_program_default', line 90, column 2 to column 44)",
  " (in 'stan_program_default', line 92, column 2 to column 36)",
  " (in 'stan_program_default', line 93, column 2 to column 37)",
  " (in 'stan_program_default', line 94, column 2 to column 36)",
  " (in 'stan_program_default', line 96, column 2 to column 40)",
  " (in 'stan_program_default', line 97, column 2 to column 41)",
  " (in 'stan_program_default', line 98, column 2 to column 40)",
  " (in 'stan_program_default', line 105, column 2 to column 29)",
  " (in 'stan_program_default', line 107, column 2 to column 28)",
  " (in 'stan_program_default', line 110, column 2 to column 28)",
  " (in 'stan_program_default', line 114, column 2 to column 31)",
  " (in 'stan_program_default', line 115, column 2 to column 40)",
  " (in 'stan_program_default', line 116, column 2 to column 20)",
  " (in 'stan_program_default', line 117, column 2 to column 29)",
  " (in 'stan_program_default', line 118, column 2 to column 34)",
  " (in 'stan_program_default', line 119, column 2 to column 34)",
  " (in 'stan_program_default', line 120, column 2 to column 38)",
  " (in 'stan_program_default', line 121, column 2 to column 38)",
  " (in 'stan_program_default', line 123, column 2 to column 35)",
  " (in 'stan_program_default', line 124, column 2 to column 35)",
  " (in 'stan_program_default', line 125, column 2 to column 39)",
  " (in 'stan_program_default', line 126, column 2 to column 39)",
  " (in 'stan_program_default', line 127, column 2 to column 35)",
  " (in 'stan_program_default', line 128, column 2 to column 35)",
  " (in 'stan_program_default', line 129, column 2 to column 35)",
  " (in 'stan_program_default', line 130, column 2 to column 35)",
  " (in 'stan_program_default', line 132, column 2 to column 35)",
  " (in 'stan_program_default', line 133, column 2 to column 35)",
  " (in 'stan_program_default', line 136, column 2 to column 41)",
  " (in 'stan_program_default', line 137, column 2 to column 41)",
  " (in 'stan_program_default', line 139, column 2 to column 41)",
  " (in 'stan_program_default', line 140, column 2 to column 41)",
  " (in 'stan_program_default', line 142, column 2 to column 36)",
  " (in 'stan_program_default', line 143, column 2 to column 36)",
  " (in 'stan_program_default', line 146, column 2 to column 37)",
  " (in 'stan_program_default', line 147, column 2 to column 37)",
  " (in 'stan_program_default', line 148, column 2 to column 37)",
  " (in 'stan_program_default', line 149, column 2 to column 37)",
  " (in 'stan_program_default', line 157, column 2 to column 18)",
  " (in 'stan_program_default', line 162, column 27 to column 34)",
  " (in 'stan_program_default', line 162, column 2 to column 36)",
  " (in 'stan_program_default', line 163, column 28 to column 35)",
  " (in 'stan_program_default', line 163, column 2 to column 37)",
  " (in 'stan_program_default', line 167, column 9 to column 18)",
  " (in 'stan_program_default', line 167, column 2 to column 37)",
  " (in 'stan_program_default', line 168, column 9 to column 18)",
  " (in 'stan_program_default', line 168, column 2 to column 37)",
  " (in 'stan_program_default', line 169, column 9 to column 18)",
  " (in 'stan_program_default', line 169, column 2 to column 37)",
  " (in 'stan_program_default', line 170, column 9 to column 18)",
  " (in 'stan_program_default', line 170, column 2 to column 37)",
  " (in 'stan_program_default', line 172, column 9 to column 18)",
  " (in 'stan_program_default', line 172, column 2 to column 37)",
  " (in 'stan_program_default', line 173, column 9 to column 18)",
  " (in 'stan_program_default', line 173, column 2 to column 37)",
  " (in 'stan_program_default', line 177, column 9 to column 33)",
  " (in 'stan_program_default', line 177, column 2 to column 59)",
  " (in 'stan_program_default', line 178, column 9 to column 33)",
  " (in 'stan_program_default', line 178, column 2 to column 59)",
  " (in 'stan_program_default', line 182, column 12 to column 36)",
  " (in 'stan_program_default', line 182, column 3 to column 38)",
  " (in 'stan_program_default', line 183, column 10 to column 34)",
  " (in 'stan_program_default', line 183, column 1 to column 36)",
  " (in 'stan_program_default', line 184, column 8 to column 32)",
  " (in 'stan_program_default', line 184, column 1 to column 39)",
  " (in 'stan_program_default', line 189, column 2 to column 41)",
  " (in 'stan_program_default', line 198, column 4 to column 16)",
  " (in 'stan_program_default', line 199, column 4 to column 28)",
  " (in 'stan_program_default', line 197, column 9 to line 200, column 3)",
  " (in 'stan_program_default', line 195, column 4 to column 28)",
  " (in 'stan_program_default', line 196, column 4 to column 16)",
  " (in 'stan_program_default', line 194, column 19 to line 197, column 3)",
  " (in 'stan_program_default', line 194, column 2 to line 200, column 3)",
  " (in 'stan_program_default', line 206, column 4 to column 16)",
  " (in 'stan_program_default', line 205, column 9 to line 207, column 3)",
  " (in 'stan_program_default', line 204, column 2 to column 28)",
  " (in 'stan_program_default', line 203, column 27 to line 205, column 3)",
  " (in 'stan_program_default', line 203, column 2 to line 207, column 3)",
  " (in 'stan_program_default', line 193, column 24 to line 208, column 1)",
  " (in 'stan_program_default', line 193, column 0 to line 208, column 1)",
  " (in 'stan_program_default', line 220, column 4 to column 32)",
  " (in 'stan_program_default', line 221, column 4 to column 34)",
  " (in 'stan_program_default', line 219, column 22 to line 223, column 3)",
  " (in 'stan_program_default', line 219, column 2 to line 223, column 3)",
  " (in 'stan_program_default', line 227, column 4 to line 229, column 62)",
  " (in 'stan_program_default', line 230, column 4 to line 232, column 64)",
  " (in 'stan_program_default', line 235, column 4 to line 237, column 62)",
  " (in 'stan_program_default', line 238, column 4 to line 240, column 62)",
  " (in 'stan_program_default', line 226, column 24 to line 241, column 3)",
  " (in 'stan_program_default', line 226, column 2 to line 241, column 3)",
  " (in 'stan_program_default', line 245, column 4 to line 247, column 62)",
  " (in 'stan_program_default', line 248, column 4 to line 250, column 62)",
  " (in 'stan_program_default', line 244, column 24 to line 251, column 3)",
  " (in 'stan_program_default', line 244, column 2 to line 251, column 3)",
  " (in 'stan_program_default', line 253, column 2 to column 60)",
  " (in 'stan_program_default', line 254, column 2 to column 60)",
  " (in 'stan_program_default', line 255, column 2 to column 60)",
  " (in 'stan_program_default', line 256, column 2 to column 60)",
  " (in 'stan_program_default', line 257, column 2 to column 60)",
  " (in 'stan_program_default', line 258, column 2 to column 60)",
  " (in 'stan_program_default', line 274, column 6 to column 53)",
  " (in 'stan_program_default', line 275, column 6 to column 53)",
  " (in 'stan_program_default', line 273, column 11 to line 276, column 5)",
  " (in 'stan_program_default', line 271, column 6 to column 103)",
  " (in 'stan_program_default', line 272, column 6 to column 103)",
  " (in 'stan_program_default', line 270, column 21 to line 273, column 5)",
  " (in 'stan_program_default', line 270, column 4 to line 276, column 5)",
  " (in 'stan_program_default', line 269, column 26 to line 277, column 3)",
  " (in 'stan_program_default', line 269, column 2 to line 277, column 3)",
  " (in 'stan_program_default', line 286, column 9 to column 21)",
  " (in 'stan_program_default', line 304, column 27 to column 39)",
  " (in 'stan_program_default', line 323, column 9 to column 20)",
  " (in 'stan_program_default', line 324, column 9 to column 20)",
  " (in 'stan_program_default', line 325, column 9 to column 20)",
  " (in 'stan_program_default', line 329, column 9 to column 20)",
  " (in 'stan_program_default', line 330, column 9 to column 20)",
  " (in 'stan_program_default', line 331, column 9 to column 20)",
  " (in 'stan_program_default', line 332, column 9 to column 20)",
  " (in 'stan_program_default', line 333, column 9 to column 20)",
  " (in 'stan_program_default', line 341, column 9 to column 20)",
  " (in 'stan_program_default', line 342, column 9 to column 20)",
  " (in 'stan_program_default', line 343, column 9 to column 20)",
  " (in 'stan_program_default', line 344, column 9 to column 23)",
  " (in 'stan_program_default', line 345, column 9 to column 23)",
  " (in 'stan_program_default', line 347, column 9 to column 18)",
  " (in 'stan_program_default', line 350, column 9 to column 20)",
  " (in 'stan_program_default', line 351, column 9 to column 20)",
  " (in 'stan_program_default', line 357, column 9 to column 20)",
  " (in 'stan_program_default', line 358, column 9 to column 20)",
  " (in 'stan_program_default', line 359, column 9 to column 20)",
  " (in 'stan_program_default', line 362, column 9 to column 18)",
  " (in 'stan_program_default', line 363, column 9 to column 18)",
  " (in 'stan_program_default', line 371, column 9 to column 20)",
  " (in 'stan_program_default', line 372, column 9 to column 20)",
  " (in 'stan_program_default', line 373, column 9 to column 20)",
  " (in 'stan_program_default', line 378, column 9 to column 20)",
  " (in 'stan_program_default', line 379, column 9 to column 20)",
  " (in 'stan_program_default', line 380, column 9 to column 20)",
  " (in 'stan_program_default', line 385, column 9 to column 20)",
  " (in 'stan_program_default', line 386, column 9 to column 20)",
  " (in 'stan_program_default', line 387, column 9 to column 20)",
  " (in 'stan_program_default', line 391, column 9 to column 20)",
  " (in 'stan_program_default', line 392, column 9 to column 20)",
  " (in 'stan_program_default', line 397, column 9 to column 20)",
  " (in 'stan_program_default', line 398, column 9 to column 20)",
  " (in 'stan_program_default', line 399, column 9 to column 20)",
  " (in 'stan_program_default', line 403, column 9 to column 20)",
  " (in 'stan_program_default', line 404, column 9 to column 20)",
  " (in 'stan_program_default', line 405, column 9 to column 20)",
  " (in 'stan_program_default', line 733, column 11 to column 22)",
  " (in 'stan_program_default', line 734, column 9 to column 20)",
  " (in 'stan_program_default', line 736, column 9 to column 20)",
  " (in 'stan_program_default', line 737, column 9 to column 20)",
  " (in 'stan_program_default', line 738, column 9 to column 20)",
  " (in 'stan_program_default', line 739, column 9 to column 20)",
  " (in 'stan_program_default', line 740, column 9 to column 20)",
  " (in 'stan_program_default', line 741, column 9 to column 20)",
  " (in 'stan_program_default', line 742, column 9 to column 20)",
  " (in 'stan_program_default', line 743, column 9 to column 20)",
  " (in 'stan_program_default', line 744, column 9 to column 20)",
  " (in 'stan_program_default', line 745, column 9 to column 20)",
  " (in 'stan_program_default', line 746, column 9 to column 20)",
  " (in 'stan_program_default', line 749, column 9 to column 18)",
  " (in 'stan_program_default', line 751, column 9 to column 18)",
  " (in 'stan_program_default', line 3, column 4 to column 26)",
  " (in 'stan_program_default', line 4, column 4 to column 21)",
  " (in 'stan_program_default', line 5, column 11 to column 13)",
  " (in 'stan_program_default', line 5, column 15 to column 17)",
  " (in 'stan_program_default', line 5, column 4 to column 21)",
  " (in 'stan_program_default', line 7, column 6 to column 66)",
  " (in 'stan_program_default', line 6, column 4 to line 7, column 66)",
  " (in 'stan_program_default', line 24, column 8 to column 49)",
  " (in 'stan_program_default', line 23, column 6 to line 24, column 49)",
  " (in 'stan_program_default', line 29, column 6 to column 49)",
  " (in 'stan_program_default', line 17, column 20 to line 30, column 5)",
  " (in 'stan_program_default', line 17, column 4 to line 30, column 5)",
  " (in 'stan_program_default', line 31, column 4 to column 22)",
  " (in 'stan_program_default', line 2, column 41 to line 32, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
conv1d(const T0__& x_arg__, const T1__& kernel_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
conv1d(const T0__& x_arg__, const T1__& kernel_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& kernel = stan::math::to_ref(kernel_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nk = std::numeric_limits<int>::min();
    current_statement__ = 429;
    nk = stan::math::rows(kernel);
    int nx = std::numeric_limits<int>::min();
    current_statement__ = 430;
    nx = stan::math::rows(x);
    current_statement__ = 431;
    stan::math::validate_non_negative_index("X", "nx", nx);
    current_statement__ = 432;
    stan::math::validate_non_negative_index("X", "nk", nk);
    Eigen::Matrix<local_scalar_t__,-1,-1> X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nx, nk, DUMMY_VAR__);
    current_statement__ = 435;
    if (stan::math::logical_lt(nx, nk)) {
      current_statement__ = 434;
      std::stringstream errmsg_stream__;
      stan::math::stan_print(&errmsg_stream__,
        "nrow(x) must be >= nrow(kernel). x had nrow =");
      stan::math::stan_print(&errmsg_stream__, nx);
      throw std::domain_error(errmsg_stream__.str());
    }
    current_statement__ = 440;
    for (int i = 1; i <= nk; ++i) {
      current_statement__ = 437;
      if (stan::math::logical_lt(i, nk)) {
        current_statement__ = 436;
        stan::model::assign(X, stan::math::rep_vector(0, (nk - i)),
          "assigning variable X", stan::model::index_min_max(1, (nk - i)),
          stan::model::index_uni(i));
      }
      current_statement__ = 438;
      stan::model::assign(X,
        stan::model::rvalue(x, "x",
          stan::model::index_min_max(1, ((nx - nk) + i))),
        "assigning variable X",
        stan::model::index_min_max(((nk - i) + 1), nx),
        stan::model::index_uni(i));
    }
    current_statement__ = 441;
    return stan::math::multiply(X, kernel);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_stan_program_default final : public model_base_crtp<model_stan_program_default> {
private:
  int N_weeks;
  int N_weeks_before;
  int Max_delay;
  std::vector<int> obs_cas;
  std::vector<int> obs_hosp;
  std::vector<int> obs_die;
  Eigen::Matrix<double,-1,1> obs_boost_data__;
  double pop_size;
  double start_p_imm;
  double cum_p_inf_init;
  int N_ifr_adj;
  Eigen::Matrix<double,-1,1> ifr_adj_data__;
  Eigen::Matrix<double,-1,1> ifr_vac_adj_data__;
  double pri_ifr_decl_OR_a;
  double pri_ifr_decl_OR_b;
  double pri_rr_decl_sev_a;
  double pri_rr_decl_sev_b;
  double pri_rr_decl_die_a;
  double pri_rr_decl_die_b;
  double ifr_adj_fixed;
  double infect_dist_rate;
  double infect_dist_shap;
  double seropos_dist_rate;
  double seropos_dist_shap;
  int N_spl_par_rt;
  Eigen::Matrix<double,-1,-1> spl_basis_rt_data__;
  int N_spl_par_dx;
  Eigen::Matrix<double,-1,-1> spl_basis_dx_data__;
  double inf_prg_delay_shap;
  double inf_prg_delay_rate;
  double asy_rec_delay_shap;
  double asy_rec_delay_rate;
  double sym_prg_delay_shap;
  double sym_prg_delay_rate;
  double sev_prg_delay_shap;
  double sev_prg_delay_rate;
  double cas_rep_delay_shap;
  double cas_rep_delay_rate;
  double die_rep_delay_shap;
  double die_rep_delay_rate;
  int pre_period_zero;
  int cas_yes;
  int hosp_yes;
  int die_yes;
  int obs_cas_rep;
  int obs_hosp_rep;
  int obs_die_rep;
  int lastDeathWeek;
  int lastHospWeek;
  int lastCaseWeek;
  double pri_log_infections_0_mu;
  double pri_log_infections_0_sd;
  double pri_logRt_mu;
  double pri_logRt_sd;
  double pri_serial_i_shap;
  double pri_serial_i_rate;
  double pri_deriv1_spl_par_sd;
  double pri_deriv2_spl_par_sd;
  double pri_p_sym_if_inf_a;
  double pri_p_sym_if_inf_b;
  double pri_new_p_sym_if_inf_a;
  double pri_new_p_sym_if_inf_b;
  double pri_p_sev_if_sym_a;
  double pri_p_sev_if_sym_b;
  double pri_p_die_if_sev_a;
  double pri_p_die_if_sev_b;
  double pri_p_die_if_inf_a;
  double pri_p_die_if_inf_b;
  double pri_rr_diag_asy_vs_sym_a;
  double pri_rr_diag_asy_vs_sym_b;
  double pri_rr_diag_sym_vs_sev_a;
  double pri_rr_diag_sym_vs_sev_b;
  double pri_p_diag_if_sev_a;
  double pri_p_diag_if_sev_b;
  double scale_dx_delay_sym_a;
  double scale_dx_delay_sym_b;
  double scale_dx_delay_sev_a;
  double scale_dx_delay_sev_b;
  int N_weeks_tot;
  std::vector<int> obs_cas_mvs;
  std::vector<int> obs_hosp_mvs;
  Eigen::Matrix<double,-1,1> inf_prg_delay_rv_data__;
  Eigen::Matrix<double,-1,1> asy_rec_delay_rv_data__;
  Eigen::Matrix<double,-1,1> sym_prg_delay_rv_data__;
  Eigen::Matrix<double,-1,1> sev_prg_delay_rv_data__;
  Eigen::Matrix<double,-1,1> cas_rep_delay_rv_data__;
  Eigen::Matrix<double,-1,1> die_rep_delay_rv_data__;
  Eigen::Matrix<double,-1,1> cas_cum_report_delay_rv_data__;
  Eigen::Matrix<double,-1,1> die_cum_report_delay_rv_data__;
  std::vector<int> idx1;
  std::vector<int> idx2;
  Eigen::Matrix<double,-1,1> idx3_data__;
  int deriv1_spl_par_rt_1dim__;
  int deriv2_spl_par_rt_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> obs_boost{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ifr_adj{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ifr_vac_adj{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> spl_basis_rt{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> spl_basis_dx{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> inf_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> asy_rec_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sym_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sev_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cas_rep_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> die_rep_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cas_cum_report_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> die_cum_report_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> idx3{nullptr, 0};
public:
  ~model_stan_program_default() {}
  model_stan_program_default(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_stan_program_default_namespace::model_stan_program_default";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 215;
      context__.validate_dims("data initialization", "N_weeks", "int",
        std::vector<size_t>{});
      N_weeks = std::numeric_limits<int>::min();
      current_statement__ = 215;
      N_weeks = context__.vals_i("N_weeks")[(1 - 1)];
      current_statement__ = 215;
      stan::math::check_greater_or_equal(function__, "N_weeks", N_weeks, 0);
      current_statement__ = 216;
      context__.validate_dims("data initialization", "N_weeks_before", "int",
        std::vector<size_t>{});
      N_weeks_before = std::numeric_limits<int>::min();
      current_statement__ = 216;
      N_weeks_before = context__.vals_i("N_weeks_before")[(1 - 1)];
      current_statement__ = 216;
      stan::math::check_greater_or_equal(function__, "N_weeks_before",
        N_weeks_before, 0);
      current_statement__ = 217;
      context__.validate_dims("data initialization", "Max_delay", "int",
        std::vector<size_t>{});
      Max_delay = std::numeric_limits<int>::min();
      current_statement__ = 217;
      Max_delay = context__.vals_i("Max_delay")[(1 - 1)];
      current_statement__ = 217;
      stan::math::check_greater_or_equal(function__, "Max_delay", Max_delay,
        0);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("obs_cas", "N_weeks", N_weeks);
      current_statement__ = 219;
      context__.validate_dims("data initialization", "obs_cas", "int",
        std::vector<size_t>{static_cast<size_t>(N_weeks)});
      obs_cas = std::vector<int>(N_weeks, std::numeric_limits<int>::min());
      current_statement__ = 219;
      obs_cas = context__.vals_i("obs_cas");
      current_statement__ = 219;
      stan::math::check_greater_or_equal(function__, "obs_cas", obs_cas, 0);
      current_statement__ = 220;
      stan::math::validate_non_negative_index("obs_hosp", "N_weeks", N_weeks);
      current_statement__ = 221;
      context__.validate_dims("data initialization", "obs_hosp", "int",
        std::vector<size_t>{static_cast<size_t>(N_weeks)});
      obs_hosp = std::vector<int>(N_weeks, std::numeric_limits<int>::min());
      current_statement__ = 221;
      obs_hosp = context__.vals_i("obs_hosp");
      current_statement__ = 221;
      stan::math::check_greater_or_equal(function__, "obs_hosp", obs_hosp, 0);
      current_statement__ = 222;
      stan::math::validate_non_negative_index("obs_die", "N_weeks", N_weeks);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "obs_die", "int",
        std::vector<size_t>{static_cast<size_t>(N_weeks)});
      obs_die = std::vector<int>(N_weeks, std::numeric_limits<int>::min());
      current_statement__ = 223;
      obs_die = context__.vals_i("obs_die");
      current_statement__ = 223;
      stan::math::check_greater_or_equal(function__, "obs_die", obs_die, 0);
      current_statement__ = 224;
      stan::math::validate_non_negative_index("obs_boost", "N_weeks", N_weeks);
      current_statement__ = 225;
      context__.validate_dims("data initialization", "obs_boost", "double",
        std::vector<size_t>{static_cast<size_t>(N_weeks)});
      obs_boost_data__ = Eigen::Matrix<double,-1,1>::Constant(N_weeks,
                           std::numeric_limits<double>::quiet_NaN());
      new (&obs_boost)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(obs_boost_data__.data(),
        N_weeks);
      {
        std::vector<local_scalar_t__> obs_boost_flat__;
        current_statement__ = 225;
        obs_boost_flat__ = context__.vals_r("obs_boost");
        current_statement__ = 225;
        pos__ = 1;
        current_statement__ = 225;
        for (int sym1__ = 1; sym1__ <= N_weeks; ++sym1__) {
          current_statement__ = 225;
          stan::model::assign(obs_boost, obs_boost_flat__[(pos__ - 1)],
            "assigning variable obs_boost", stan::model::index_uni(sym1__));
          current_statement__ = 225;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 225;
      stan::math::check_greater_or_equal(function__, "obs_boost", obs_boost,
        0);
      current_statement__ = 226;
      context__.validate_dims("data initialization", "pop_size", "double",
        std::vector<size_t>{});
      pop_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 226;
      pop_size = context__.vals_r("pop_size")[(1 - 1)];
      current_statement__ = 226;
      stan::math::check_greater_or_equal(function__, "pop_size", pop_size, 0);
      current_statement__ = 227;
      context__.validate_dims("data initialization", "start_p_imm", "double",
        std::vector<size_t>{});
      start_p_imm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 227;
      start_p_imm = context__.vals_r("start_p_imm")[(1 - 1)];
      current_statement__ = 227;
      stan::math::check_greater_or_equal(function__, "start_p_imm",
        start_p_imm, 0);
      current_statement__ = 227;
      stan::math::check_less_or_equal(function__, "start_p_imm", start_p_imm,
        1);
      current_statement__ = 228;
      context__.validate_dims("data initialization", "cum_p_inf_init",
        "double", std::vector<size_t>{});
      cum_p_inf_init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 228;
      cum_p_inf_init = context__.vals_r("cum_p_inf_init")[(1 - 1)];
      current_statement__ = 228;
      stan::math::check_greater_or_equal(function__, "cum_p_inf_init",
        cum_p_inf_init, 0);
      current_statement__ = 228;
      stan::math::check_less_or_equal(function__, "cum_p_inf_init",
        cum_p_inf_init, 1);
      current_statement__ = 229;
      context__.validate_dims("data initialization", "N_ifr_adj", "int",
        std::vector<size_t>{});
      N_ifr_adj = std::numeric_limits<int>::min();
      current_statement__ = 229;
      N_ifr_adj = context__.vals_i("N_ifr_adj")[(1 - 1)];
      current_statement__ = 229;
      stan::math::check_greater_or_equal(function__, "N_ifr_adj", N_ifr_adj,
        0);
      current_statement__ = 230;
      stan::math::validate_non_negative_index("ifr_adj", "N_ifr_adj",
        N_ifr_adj);
      current_statement__ = 231;
      context__.validate_dims("data initialization", "ifr_adj", "double",
        std::vector<size_t>{static_cast<size_t>(N_ifr_adj)});
      ifr_adj_data__ = Eigen::Matrix<double,-1,1>::Constant(N_ifr_adj,
                         std::numeric_limits<double>::quiet_NaN());
      new (&ifr_adj)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ifr_adj_data__.data(),
        N_ifr_adj);
      {
        std::vector<local_scalar_t__> ifr_adj_flat__;
        current_statement__ = 231;
        ifr_adj_flat__ = context__.vals_r("ifr_adj");
        current_statement__ = 231;
        pos__ = 1;
        current_statement__ = 231;
        for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
          current_statement__ = 231;
          stan::model::assign(ifr_adj, ifr_adj_flat__[(pos__ - 1)],
            "assigning variable ifr_adj", stan::model::index_uni(sym1__));
          current_statement__ = 231;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 231;
      stan::math::check_greater_or_equal(function__, "ifr_adj", ifr_adj, 0);
      current_statement__ = 232;
      stan::math::validate_non_negative_index("ifr_vac_adj",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 233;
      context__.validate_dims("data initialization", "ifr_vac_adj", "double",
        std::vector<size_t>{static_cast<size_t>((N_weeks + N_weeks_before))});
      ifr_vac_adj_data__ = Eigen::Matrix<double,-1,1>::Constant((N_weeks +
                             N_weeks_before),
                             std::numeric_limits<double>::quiet_NaN());
      new (&ifr_vac_adj)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ifr_vac_adj_data__.data(),
        (N_weeks + N_weeks_before));
      {
        std::vector<local_scalar_t__> ifr_vac_adj_flat__;
        current_statement__ = 233;
        ifr_vac_adj_flat__ = context__.vals_r("ifr_vac_adj");
        current_statement__ = 233;
        pos__ = 1;
        current_statement__ = 233;
        for (int sym1__ = 1; sym1__ <= (N_weeks + N_weeks_before); ++sym1__) {
          current_statement__ = 233;
          stan::model::assign(ifr_vac_adj, ifr_vac_adj_flat__[(pos__ - 1)],
            "assigning variable ifr_vac_adj", stan::model::index_uni(sym1__));
          current_statement__ = 233;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 233;
      stan::math::check_greater_or_equal(function__, "ifr_vac_adj",
        ifr_vac_adj, 0);
      current_statement__ = 234;
      context__.validate_dims("data initialization", "pri_ifr_decl_OR_a",
        "double", std::vector<size_t>{});
      pri_ifr_decl_OR_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 234;
      pri_ifr_decl_OR_a = context__.vals_r("pri_ifr_decl_OR_a")[(1 - 1)];
      current_statement__ = 234;
      stan::math::check_greater_or_equal(function__, "pri_ifr_decl_OR_a",
        pri_ifr_decl_OR_a, 0);
      current_statement__ = 235;
      context__.validate_dims("data initialization", "pri_ifr_decl_OR_b",
        "double", std::vector<size_t>{});
      pri_ifr_decl_OR_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 235;
      pri_ifr_decl_OR_b = context__.vals_r("pri_ifr_decl_OR_b")[(1 - 1)];
      current_statement__ = 235;
      stan::math::check_greater_or_equal(function__, "pri_ifr_decl_OR_b",
        pri_ifr_decl_OR_b, 0);
      current_statement__ = 236;
      context__.validate_dims("data initialization", "pri_rr_decl_sev_a",
        "double", std::vector<size_t>{});
      pri_rr_decl_sev_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 236;
      pri_rr_decl_sev_a = context__.vals_r("pri_rr_decl_sev_a")[(1 - 1)];
      current_statement__ = 236;
      stan::math::check_greater_or_equal(function__, "pri_rr_decl_sev_a",
        pri_rr_decl_sev_a, 0);
      current_statement__ = 237;
      context__.validate_dims("data initialization", "pri_rr_decl_sev_b",
        "double", std::vector<size_t>{});
      pri_rr_decl_sev_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 237;
      pri_rr_decl_sev_b = context__.vals_r("pri_rr_decl_sev_b")[(1 - 1)];
      current_statement__ = 237;
      stan::math::check_greater_or_equal(function__, "pri_rr_decl_sev_b",
        pri_rr_decl_sev_b, 0);
      current_statement__ = 238;
      context__.validate_dims("data initialization", "pri_rr_decl_die_a",
        "double", std::vector<size_t>{});
      pri_rr_decl_die_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 238;
      pri_rr_decl_die_a = context__.vals_r("pri_rr_decl_die_a")[(1 - 1)];
      current_statement__ = 238;
      stan::math::check_greater_or_equal(function__, "pri_rr_decl_die_a",
        pri_rr_decl_die_a, 0);
      current_statement__ = 239;
      context__.validate_dims("data initialization", "pri_rr_decl_die_b",
        "double", std::vector<size_t>{});
      pri_rr_decl_die_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 239;
      pri_rr_decl_die_b = context__.vals_r("pri_rr_decl_die_b")[(1 - 1)];
      current_statement__ = 239;
      stan::math::check_greater_or_equal(function__, "pri_rr_decl_die_b",
        pri_rr_decl_die_b, 0);
      current_statement__ = 240;
      context__.validate_dims("data initialization", "ifr_adj_fixed",
        "double", std::vector<size_t>{});
      ifr_adj_fixed = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 240;
      ifr_adj_fixed = context__.vals_r("ifr_adj_fixed")[(1 - 1)];
      current_statement__ = 240;
      stan::math::check_greater_or_equal(function__, "ifr_adj_fixed",
        ifr_adj_fixed, 0);
      current_statement__ = 241;
      context__.validate_dims("data initialization", "infect_dist_rate",
        "double", std::vector<size_t>{});
      infect_dist_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 241;
      infect_dist_rate = context__.vals_r("infect_dist_rate")[(1 - 1)];
      current_statement__ = 241;
      stan::math::check_greater_or_equal(function__, "infect_dist_rate",
        infect_dist_rate, 0);
      current_statement__ = 242;
      context__.validate_dims("data initialization", "infect_dist_shap",
        "double", std::vector<size_t>{});
      infect_dist_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 242;
      infect_dist_shap = context__.vals_r("infect_dist_shap")[(1 - 1)];
      current_statement__ = 242;
      stan::math::check_greater_or_equal(function__, "infect_dist_shap",
        infect_dist_shap, 0);
      current_statement__ = 243;
      context__.validate_dims("data initialization", "seropos_dist_rate",
        "double", std::vector<size_t>{});
      seropos_dist_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 243;
      seropos_dist_rate = context__.vals_r("seropos_dist_rate")[(1 - 1)];
      current_statement__ = 243;
      stan::math::check_greater_or_equal(function__, "seropos_dist_rate",
        seropos_dist_rate, 0);
      current_statement__ = 244;
      context__.validate_dims("data initialization", "seropos_dist_shap",
        "double", std::vector<size_t>{});
      seropos_dist_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 244;
      seropos_dist_shap = context__.vals_r("seropos_dist_shap")[(1 - 1)];
      current_statement__ = 244;
      stan::math::check_greater_or_equal(function__, "seropos_dist_shap",
        seropos_dist_shap, 0);
      current_statement__ = 245;
      context__.validate_dims("data initialization", "N_spl_par_rt", "int",
        std::vector<size_t>{});
      N_spl_par_rt = std::numeric_limits<int>::min();
      current_statement__ = 245;
      N_spl_par_rt = context__.vals_i("N_spl_par_rt")[(1 - 1)];
      current_statement__ = 245;
      stan::math::check_greater_or_equal(function__, "N_spl_par_rt",
        N_spl_par_rt, 0);
      current_statement__ = 246;
      stan::math::validate_non_negative_index("spl_basis_rt",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 247;
      stan::math::validate_non_negative_index("spl_basis_rt", "N_spl_par_rt",
        N_spl_par_rt);
      current_statement__ = 248;
      context__.validate_dims("data initialization", "spl_basis_rt",
        "double",
        std::vector<size_t>{static_cast<size_t>((N_weeks + N_weeks_before)),
          static_cast<size_t>(N_spl_par_rt)});
      spl_basis_rt_data__ = Eigen::Matrix<double,-1,-1>::Constant((N_weeks +
                              N_weeks_before), N_spl_par_rt,
                              std::numeric_limits<double>::quiet_NaN());
      new (&spl_basis_rt)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(spl_basis_rt_data__.data(),
        (N_weeks + N_weeks_before), N_spl_par_rt);
      {
        std::vector<local_scalar_t__> spl_basis_rt_flat__;
        current_statement__ = 248;
        spl_basis_rt_flat__ = context__.vals_r("spl_basis_rt");
        current_statement__ = 248;
        pos__ = 1;
        current_statement__ = 248;
        for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
          current_statement__ = 248;
          for (int sym2__ = 1; sym2__ <= (N_weeks + N_weeks_before); ++sym2__) {
            current_statement__ = 248;
            stan::model::assign(spl_basis_rt, spl_basis_rt_flat__[(pos__ -
              1)], "assigning variable spl_basis_rt",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 248;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 249;
      context__.validate_dims("data initialization", "N_spl_par_dx", "int",
        std::vector<size_t>{});
      N_spl_par_dx = std::numeric_limits<int>::min();
      current_statement__ = 249;
      N_spl_par_dx = context__.vals_i("N_spl_par_dx")[(1 - 1)];
      current_statement__ = 249;
      stan::math::check_greater_or_equal(function__, "N_spl_par_dx",
        N_spl_par_dx, 0);
      current_statement__ = 250;
      stan::math::validate_non_negative_index("spl_basis_dx",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 251;
      stan::math::validate_non_negative_index("spl_basis_dx", "N_spl_par_dx",
        N_spl_par_dx);
      current_statement__ = 252;
      context__.validate_dims("data initialization", "spl_basis_dx",
        "double",
        std::vector<size_t>{static_cast<size_t>((N_weeks + N_weeks_before)),
          static_cast<size_t>(N_spl_par_dx)});
      spl_basis_dx_data__ = Eigen::Matrix<double,-1,-1>::Constant((N_weeks +
                              N_weeks_before), N_spl_par_dx,
                              std::numeric_limits<double>::quiet_NaN());
      new (&spl_basis_dx)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(spl_basis_dx_data__.data(),
        (N_weeks + N_weeks_before), N_spl_par_dx);
      {
        std::vector<local_scalar_t__> spl_basis_dx_flat__;
        current_statement__ = 252;
        spl_basis_dx_flat__ = context__.vals_r("spl_basis_dx");
        current_statement__ = 252;
        pos__ = 1;
        current_statement__ = 252;
        for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
          current_statement__ = 252;
          for (int sym2__ = 1; sym2__ <= (N_weeks + N_weeks_before); ++sym2__) {
            current_statement__ = 252;
            stan::model::assign(spl_basis_dx, spl_basis_dx_flat__[(pos__ -
              1)], "assigning variable spl_basis_dx",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 252;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 253;
      context__.validate_dims("data initialization", "inf_prg_delay_shap",
        "double", std::vector<size_t>{});
      inf_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 253;
      inf_prg_delay_shap = context__.vals_r("inf_prg_delay_shap")[(1 - 1)];
      current_statement__ = 253;
      stan::math::check_greater_or_equal(function__, "inf_prg_delay_shap",
        inf_prg_delay_shap, 0);
      current_statement__ = 254;
      context__.validate_dims("data initialization", "inf_prg_delay_rate",
        "double", std::vector<size_t>{});
      inf_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 254;
      inf_prg_delay_rate = context__.vals_r("inf_prg_delay_rate")[(1 - 1)];
      current_statement__ = 254;
      stan::math::check_greater_or_equal(function__, "inf_prg_delay_rate",
        inf_prg_delay_rate, 0);
      current_statement__ = 255;
      context__.validate_dims("data initialization", "asy_rec_delay_shap",
        "double", std::vector<size_t>{});
      asy_rec_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 255;
      asy_rec_delay_shap = context__.vals_r("asy_rec_delay_shap")[(1 - 1)];
      current_statement__ = 255;
      stan::math::check_greater_or_equal(function__, "asy_rec_delay_shap",
        asy_rec_delay_shap, 0);
      current_statement__ = 256;
      context__.validate_dims("data initialization", "asy_rec_delay_rate",
        "double", std::vector<size_t>{});
      asy_rec_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 256;
      asy_rec_delay_rate = context__.vals_r("asy_rec_delay_rate")[(1 - 1)];
      current_statement__ = 256;
      stan::math::check_greater_or_equal(function__, "asy_rec_delay_rate",
        asy_rec_delay_rate, 0);
      current_statement__ = 257;
      context__.validate_dims("data initialization", "sym_prg_delay_shap",
        "double", std::vector<size_t>{});
      sym_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 257;
      sym_prg_delay_shap = context__.vals_r("sym_prg_delay_shap")[(1 - 1)];
      current_statement__ = 257;
      stan::math::check_greater_or_equal(function__, "sym_prg_delay_shap",
        sym_prg_delay_shap, 0);
      current_statement__ = 258;
      context__.validate_dims("data initialization", "sym_prg_delay_rate",
        "double", std::vector<size_t>{});
      sym_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 258;
      sym_prg_delay_rate = context__.vals_r("sym_prg_delay_rate")[(1 - 1)];
      current_statement__ = 258;
      stan::math::check_greater_or_equal(function__, "sym_prg_delay_rate",
        sym_prg_delay_rate, 0);
      current_statement__ = 259;
      context__.validate_dims("data initialization", "sev_prg_delay_shap",
        "double", std::vector<size_t>{});
      sev_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 259;
      sev_prg_delay_shap = context__.vals_r("sev_prg_delay_shap")[(1 - 1)];
      current_statement__ = 259;
      stan::math::check_greater_or_equal(function__, "sev_prg_delay_shap",
        sev_prg_delay_shap, 0);
      current_statement__ = 260;
      context__.validate_dims("data initialization", "sev_prg_delay_rate",
        "double", std::vector<size_t>{});
      sev_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 260;
      sev_prg_delay_rate = context__.vals_r("sev_prg_delay_rate")[(1 - 1)];
      current_statement__ = 260;
      stan::math::check_greater_or_equal(function__, "sev_prg_delay_rate",
        sev_prg_delay_rate, 0);
      current_statement__ = 261;
      context__.validate_dims("data initialization", "cas_rep_delay_shap",
        "double", std::vector<size_t>{});
      cas_rep_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 261;
      cas_rep_delay_shap = context__.vals_r("cas_rep_delay_shap")[(1 - 1)];
      current_statement__ = 261;
      stan::math::check_greater_or_equal(function__, "cas_rep_delay_shap",
        cas_rep_delay_shap, 0);
      current_statement__ = 262;
      context__.validate_dims("data initialization", "cas_rep_delay_rate",
        "double", std::vector<size_t>{});
      cas_rep_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 262;
      cas_rep_delay_rate = context__.vals_r("cas_rep_delay_rate")[(1 - 1)];
      current_statement__ = 262;
      stan::math::check_greater_or_equal(function__, "cas_rep_delay_rate",
        cas_rep_delay_rate, 0);
      current_statement__ = 263;
      context__.validate_dims("data initialization", "die_rep_delay_shap",
        "double", std::vector<size_t>{});
      die_rep_delay_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 263;
      die_rep_delay_shap = context__.vals_r("die_rep_delay_shap")[(1 - 1)];
      current_statement__ = 263;
      stan::math::check_greater_or_equal(function__, "die_rep_delay_shap",
        die_rep_delay_shap, 0);
      current_statement__ = 264;
      context__.validate_dims("data initialization", "die_rep_delay_rate",
        "double", std::vector<size_t>{});
      die_rep_delay_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 264;
      die_rep_delay_rate = context__.vals_r("die_rep_delay_rate")[(1 - 1)];
      current_statement__ = 264;
      stan::math::check_greater_or_equal(function__, "die_rep_delay_rate",
        die_rep_delay_rate, 0);
      current_statement__ = 265;
      context__.validate_dims("data initialization", "pre_period_zero",
        "int", std::vector<size_t>{});
      pre_period_zero = std::numeric_limits<int>::min();
      current_statement__ = 265;
      pre_period_zero = context__.vals_i("pre_period_zero")[(1 - 1)];
      current_statement__ = 265;
      stan::math::check_greater_or_equal(function__, "pre_period_zero",
        pre_period_zero, 0);
      current_statement__ = 265;
      stan::math::check_less_or_equal(function__, "pre_period_zero",
        pre_period_zero, 1);
      current_statement__ = 266;
      context__.validate_dims("data initialization", "cas_yes", "int",
        std::vector<size_t>{});
      cas_yes = std::numeric_limits<int>::min();
      current_statement__ = 266;
      cas_yes = context__.vals_i("cas_yes")[(1 - 1)];
      current_statement__ = 266;
      stan::math::check_greater_or_equal(function__, "cas_yes", cas_yes, 0);
      current_statement__ = 266;
      stan::math::check_less_or_equal(function__, "cas_yes", cas_yes, 1);
      current_statement__ = 267;
      context__.validate_dims("data initialization", "hosp_yes", "int",
        std::vector<size_t>{});
      hosp_yes = std::numeric_limits<int>::min();
      current_statement__ = 267;
      hosp_yes = context__.vals_i("hosp_yes")[(1 - 1)];
      current_statement__ = 267;
      stan::math::check_greater_or_equal(function__, "hosp_yes", hosp_yes, 0);
      current_statement__ = 267;
      stan::math::check_less_or_equal(function__, "hosp_yes", hosp_yes, 1);
      current_statement__ = 268;
      context__.validate_dims("data initialization", "die_yes", "int",
        std::vector<size_t>{});
      die_yes = std::numeric_limits<int>::min();
      current_statement__ = 268;
      die_yes = context__.vals_i("die_yes")[(1 - 1)];
      current_statement__ = 268;
      stan::math::check_greater_or_equal(function__, "die_yes", die_yes, 0);
      current_statement__ = 268;
      stan::math::check_less_or_equal(function__, "die_yes", die_yes, 1);
      current_statement__ = 269;
      context__.validate_dims("data initialization", "obs_cas_rep", "int",
        std::vector<size_t>{});
      obs_cas_rep = std::numeric_limits<int>::min();
      current_statement__ = 269;
      obs_cas_rep = context__.vals_i("obs_cas_rep")[(1 - 1)];
      current_statement__ = 269;
      stan::math::check_greater_or_equal(function__, "obs_cas_rep",
        obs_cas_rep, 0);
      current_statement__ = 269;
      stan::math::check_less_or_equal(function__, "obs_cas_rep", obs_cas_rep,
        1);
      current_statement__ = 270;
      context__.validate_dims("data initialization", "obs_hosp_rep", "int",
        std::vector<size_t>{});
      obs_hosp_rep = std::numeric_limits<int>::min();
      current_statement__ = 270;
      obs_hosp_rep = context__.vals_i("obs_hosp_rep")[(1 - 1)];
      current_statement__ = 270;
      stan::math::check_greater_or_equal(function__, "obs_hosp_rep",
        obs_hosp_rep, 0);
      current_statement__ = 270;
      stan::math::check_less_or_equal(function__, "obs_hosp_rep",
        obs_hosp_rep, 1);
      current_statement__ = 271;
      context__.validate_dims("data initialization", "obs_die_rep", "int",
        std::vector<size_t>{});
      obs_die_rep = std::numeric_limits<int>::min();
      current_statement__ = 271;
      obs_die_rep = context__.vals_i("obs_die_rep")[(1 - 1)];
      current_statement__ = 271;
      stan::math::check_greater_or_equal(function__, "obs_die_rep",
        obs_die_rep, 0);
      current_statement__ = 271;
      stan::math::check_less_or_equal(function__, "obs_die_rep", obs_die_rep,
        1);
      current_statement__ = 272;
      context__.validate_dims("data initialization", "lastDeathWeek", "int",
        std::vector<size_t>{});
      lastDeathWeek = std::numeric_limits<int>::min();
      current_statement__ = 272;
      lastDeathWeek = context__.vals_i("lastDeathWeek")[(1 - 1)];
      current_statement__ = 272;
      stan::math::check_greater_or_equal(function__, "lastDeathWeek",
        lastDeathWeek, 0);
      current_statement__ = 273;
      context__.validate_dims("data initialization", "lastHospWeek", "int",
        std::vector<size_t>{});
      lastHospWeek = std::numeric_limits<int>::min();
      current_statement__ = 273;
      lastHospWeek = context__.vals_i("lastHospWeek")[(1 - 1)];
      current_statement__ = 273;
      stan::math::check_greater_or_equal(function__, "lastHospWeek",
        lastHospWeek, 0);
      current_statement__ = 274;
      context__.validate_dims("data initialization", "lastCaseWeek", "int",
        std::vector<size_t>{});
      lastCaseWeek = std::numeric_limits<int>::min();
      current_statement__ = 274;
      lastCaseWeek = context__.vals_i("lastCaseWeek")[(1 - 1)];
      current_statement__ = 274;
      stan::math::check_greater_or_equal(function__, "lastCaseWeek",
        lastCaseWeek, 0);
      current_statement__ = 275;
      context__.validate_dims("data initialization",
        "pri_log_infections_0_mu", "double", std::vector<size_t>{});
      pri_log_infections_0_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 275;
      pri_log_infections_0_mu = context__.vals_r("pri_log_infections_0_mu")[(1
        - 1)];
      current_statement__ = 276;
      context__.validate_dims("data initialization",
        "pri_log_infections_0_sd", "double", std::vector<size_t>{});
      pri_log_infections_0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 276;
      pri_log_infections_0_sd = context__.vals_r("pri_log_infections_0_sd")[(1
        - 1)];
      current_statement__ = 276;
      stan::math::check_greater_or_equal(function__,
        "pri_log_infections_0_sd", pri_log_infections_0_sd, 0);
      current_statement__ = 277;
      context__.validate_dims("data initialization", "pri_logRt_mu",
        "double", std::vector<size_t>{});
      pri_logRt_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 277;
      pri_logRt_mu = context__.vals_r("pri_logRt_mu")[(1 - 1)];
      current_statement__ = 278;
      context__.validate_dims("data initialization", "pri_logRt_sd",
        "double", std::vector<size_t>{});
      pri_logRt_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 278;
      pri_logRt_sd = context__.vals_r("pri_logRt_sd")[(1 - 1)];
      current_statement__ = 278;
      stan::math::check_greater_or_equal(function__, "pri_logRt_sd",
        pri_logRt_sd, 0);
      current_statement__ = 279;
      context__.validate_dims("data initialization", "pri_serial_i_shap",
        "double", std::vector<size_t>{});
      pri_serial_i_shap = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 279;
      pri_serial_i_shap = context__.vals_r("pri_serial_i_shap")[(1 - 1)];
      current_statement__ = 279;
      stan::math::check_greater_or_equal(function__, "pri_serial_i_shap",
        pri_serial_i_shap, 0);
      current_statement__ = 280;
      context__.validate_dims("data initialization", "pri_serial_i_rate",
        "double", std::vector<size_t>{});
      pri_serial_i_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 280;
      pri_serial_i_rate = context__.vals_r("pri_serial_i_rate")[(1 - 1)];
      current_statement__ = 280;
      stan::math::check_greater_or_equal(function__, "pri_serial_i_rate",
        pri_serial_i_rate, 0);
      current_statement__ = 281;
      context__.validate_dims("data initialization", "pri_deriv1_spl_par_sd",
        "double", std::vector<size_t>{});
      pri_deriv1_spl_par_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 281;
      pri_deriv1_spl_par_sd = context__.vals_r("pri_deriv1_spl_par_sd")[(1 -
        1)];
      current_statement__ = 281;
      stan::math::check_greater_or_equal(function__, "pri_deriv1_spl_par_sd",
        pri_deriv1_spl_par_sd, 0);
      current_statement__ = 282;
      context__.validate_dims("data initialization", "pri_deriv2_spl_par_sd",
        "double", std::vector<size_t>{});
      pri_deriv2_spl_par_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 282;
      pri_deriv2_spl_par_sd = context__.vals_r("pri_deriv2_spl_par_sd")[(1 -
        1)];
      current_statement__ = 282;
      stan::math::check_greater_or_equal(function__, "pri_deriv2_spl_par_sd",
        pri_deriv2_spl_par_sd, 0);
      current_statement__ = 283;
      context__.validate_dims("data initialization", "pri_p_sym_if_inf_a",
        "double", std::vector<size_t>{});
      pri_p_sym_if_inf_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 283;
      pri_p_sym_if_inf_a = context__.vals_r("pri_p_sym_if_inf_a")[(1 - 1)];
      current_statement__ = 283;
      stan::math::check_greater_or_equal(function__, "pri_p_sym_if_inf_a",
        pri_p_sym_if_inf_a, 0);
      current_statement__ = 284;
      context__.validate_dims("data initialization", "pri_p_sym_if_inf_b",
        "double", std::vector<size_t>{});
      pri_p_sym_if_inf_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 284;
      pri_p_sym_if_inf_b = context__.vals_r("pri_p_sym_if_inf_b")[(1 - 1)];
      current_statement__ = 284;
      stan::math::check_greater_or_equal(function__, "pri_p_sym_if_inf_b",
        pri_p_sym_if_inf_b, 0);
      current_statement__ = 285;
      context__.validate_dims("data initialization",
        "pri_new_p_sym_if_inf_a", "double", std::vector<size_t>{});
      pri_new_p_sym_if_inf_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 285;
      pri_new_p_sym_if_inf_a = context__.vals_r("pri_new_p_sym_if_inf_a")[(1
        - 1)];
      current_statement__ = 285;
      stan::math::check_greater_or_equal(function__,
        "pri_new_p_sym_if_inf_a", pri_new_p_sym_if_inf_a, 0);
      current_statement__ = 286;
      context__.validate_dims("data initialization",
        "pri_new_p_sym_if_inf_b", "double", std::vector<size_t>{});
      pri_new_p_sym_if_inf_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 286;
      pri_new_p_sym_if_inf_b = context__.vals_r("pri_new_p_sym_if_inf_b")[(1
        - 1)];
      current_statement__ = 286;
      stan::math::check_greater_or_equal(function__,
        "pri_new_p_sym_if_inf_b", pri_new_p_sym_if_inf_b, 0);
      current_statement__ = 287;
      context__.validate_dims("data initialization", "pri_p_sev_if_sym_a",
        "double", std::vector<size_t>{});
      pri_p_sev_if_sym_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 287;
      pri_p_sev_if_sym_a = context__.vals_r("pri_p_sev_if_sym_a")[(1 - 1)];
      current_statement__ = 287;
      stan::math::check_greater_or_equal(function__, "pri_p_sev_if_sym_a",
        pri_p_sev_if_sym_a, 0);
      current_statement__ = 288;
      context__.validate_dims("data initialization", "pri_p_sev_if_sym_b",
        "double", std::vector<size_t>{});
      pri_p_sev_if_sym_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 288;
      pri_p_sev_if_sym_b = context__.vals_r("pri_p_sev_if_sym_b")[(1 - 1)];
      current_statement__ = 288;
      stan::math::check_greater_or_equal(function__, "pri_p_sev_if_sym_b",
        pri_p_sev_if_sym_b, 0);
      current_statement__ = 289;
      context__.validate_dims("data initialization", "pri_p_die_if_sev_a",
        "double", std::vector<size_t>{});
      pri_p_die_if_sev_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 289;
      pri_p_die_if_sev_a = context__.vals_r("pri_p_die_if_sev_a")[(1 - 1)];
      current_statement__ = 289;
      stan::math::check_greater_or_equal(function__, "pri_p_die_if_sev_a",
        pri_p_die_if_sev_a, 0);
      current_statement__ = 290;
      context__.validate_dims("data initialization", "pri_p_die_if_sev_b",
        "double", std::vector<size_t>{});
      pri_p_die_if_sev_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 290;
      pri_p_die_if_sev_b = context__.vals_r("pri_p_die_if_sev_b")[(1 - 1)];
      current_statement__ = 290;
      stan::math::check_greater_or_equal(function__, "pri_p_die_if_sev_b",
        pri_p_die_if_sev_b, 0);
      current_statement__ = 291;
      context__.validate_dims("data initialization", "pri_p_die_if_inf_a",
        "double", std::vector<size_t>{});
      pri_p_die_if_inf_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 291;
      pri_p_die_if_inf_a = context__.vals_r("pri_p_die_if_inf_a")[(1 - 1)];
      current_statement__ = 291;
      stan::math::check_greater_or_equal(function__, "pri_p_die_if_inf_a",
        pri_p_die_if_inf_a, 0);
      current_statement__ = 292;
      context__.validate_dims("data initialization", "pri_p_die_if_inf_b",
        "double", std::vector<size_t>{});
      pri_p_die_if_inf_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 292;
      pri_p_die_if_inf_b = context__.vals_r("pri_p_die_if_inf_b")[(1 - 1)];
      current_statement__ = 292;
      stan::math::check_greater_or_equal(function__, "pri_p_die_if_inf_b",
        pri_p_die_if_inf_b, 0);
      current_statement__ = 293;
      context__.validate_dims("data initialization",
        "pri_rr_diag_asy_vs_sym_a", "double", std::vector<size_t>{});
      pri_rr_diag_asy_vs_sym_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 293;
      pri_rr_diag_asy_vs_sym_a = context__.vals_r("pri_rr_diag_asy_vs_sym_a")[(1
        - 1)];
      current_statement__ = 293;
      stan::math::check_greater_or_equal(function__,
        "pri_rr_diag_asy_vs_sym_a", pri_rr_diag_asy_vs_sym_a, 0);
      current_statement__ = 294;
      context__.validate_dims("data initialization",
        "pri_rr_diag_asy_vs_sym_b", "double", std::vector<size_t>{});
      pri_rr_diag_asy_vs_sym_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 294;
      pri_rr_diag_asy_vs_sym_b = context__.vals_r("pri_rr_diag_asy_vs_sym_b")[(1
        - 1)];
      current_statement__ = 294;
      stan::math::check_greater_or_equal(function__,
        "pri_rr_diag_asy_vs_sym_b", pri_rr_diag_asy_vs_sym_b, 0);
      current_statement__ = 295;
      context__.validate_dims("data initialization",
        "pri_rr_diag_sym_vs_sev_a", "double", std::vector<size_t>{});
      pri_rr_diag_sym_vs_sev_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 295;
      pri_rr_diag_sym_vs_sev_a = context__.vals_r("pri_rr_diag_sym_vs_sev_a")[(1
        - 1)];
      current_statement__ = 295;
      stan::math::check_greater_or_equal(function__,
        "pri_rr_diag_sym_vs_sev_a", pri_rr_diag_sym_vs_sev_a, 0);
      current_statement__ = 296;
      context__.validate_dims("data initialization",
        "pri_rr_diag_sym_vs_sev_b", "double", std::vector<size_t>{});
      pri_rr_diag_sym_vs_sev_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 296;
      pri_rr_diag_sym_vs_sev_b = context__.vals_r("pri_rr_diag_sym_vs_sev_b")[(1
        - 1)];
      current_statement__ = 296;
      stan::math::check_greater_or_equal(function__,
        "pri_rr_diag_sym_vs_sev_b", pri_rr_diag_sym_vs_sev_b, 0);
      current_statement__ = 297;
      context__.validate_dims("data initialization", "pri_p_diag_if_sev_a",
        "double", std::vector<size_t>{});
      pri_p_diag_if_sev_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 297;
      pri_p_diag_if_sev_a = context__.vals_r("pri_p_diag_if_sev_a")[(1 - 1)];
      current_statement__ = 297;
      stan::math::check_greater_or_equal(function__, "pri_p_diag_if_sev_a",
        pri_p_diag_if_sev_a, 0);
      current_statement__ = 298;
      context__.validate_dims("data initialization", "pri_p_diag_if_sev_b",
        "double", std::vector<size_t>{});
      pri_p_diag_if_sev_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 298;
      pri_p_diag_if_sev_b = context__.vals_r("pri_p_diag_if_sev_b")[(1 - 1)];
      current_statement__ = 298;
      stan::math::check_greater_or_equal(function__, "pri_p_diag_if_sev_b",
        pri_p_diag_if_sev_b, 0);
      current_statement__ = 299;
      context__.validate_dims("data initialization", "scale_dx_delay_sym_a",
        "double", std::vector<size_t>{});
      scale_dx_delay_sym_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 299;
      scale_dx_delay_sym_a = context__.vals_r("scale_dx_delay_sym_a")[(1 -
        1)];
      current_statement__ = 299;
      stan::math::check_greater_or_equal(function__, "scale_dx_delay_sym_a",
        scale_dx_delay_sym_a, 0);
      current_statement__ = 300;
      context__.validate_dims("data initialization", "scale_dx_delay_sym_b",
        "double", std::vector<size_t>{});
      scale_dx_delay_sym_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 300;
      scale_dx_delay_sym_b = context__.vals_r("scale_dx_delay_sym_b")[(1 -
        1)];
      current_statement__ = 300;
      stan::math::check_greater_or_equal(function__, "scale_dx_delay_sym_b",
        scale_dx_delay_sym_b, 0);
      current_statement__ = 301;
      context__.validate_dims("data initialization", "scale_dx_delay_sev_a",
        "double", std::vector<size_t>{});
      scale_dx_delay_sev_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 301;
      scale_dx_delay_sev_a = context__.vals_r("scale_dx_delay_sev_a")[(1 -
        1)];
      current_statement__ = 301;
      stan::math::check_greater_or_equal(function__, "scale_dx_delay_sev_a",
        scale_dx_delay_sev_a, 0);
      current_statement__ = 302;
      context__.validate_dims("data initialization", "scale_dx_delay_sev_b",
        "double", std::vector<size_t>{});
      scale_dx_delay_sev_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 302;
      scale_dx_delay_sev_b = context__.vals_r("scale_dx_delay_sev_b")[(1 -
        1)];
      current_statement__ = 302;
      stan::math::check_greater_or_equal(function__, "scale_dx_delay_sev_b",
        scale_dx_delay_sev_b, 0);
      current_statement__ = 303;
      N_weeks_tot = std::numeric_limits<int>::min();
      current_statement__ = 304;
      stan::math::validate_non_negative_index("obs_cas_mvs", "N_weeks",
        N_weeks);
      current_statement__ = 305;
      obs_cas_mvs = std::vector<int>(N_weeks,
                      std::numeric_limits<int>::min());
      current_statement__ = 306;
      stan::math::validate_non_negative_index("obs_hosp_mvs", "N_weeks",
        N_weeks);
      current_statement__ = 307;
      obs_hosp_mvs = std::vector<int>(N_weeks,
                       std::numeric_limits<int>::min());
      current_statement__ = 308;
      stan::math::validate_non_negative_index("inf_prg_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 309;
      inf_prg_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&inf_prg_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(inf_prg_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 310;
      stan::math::validate_non_negative_index("asy_rec_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 311;
      asy_rec_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&asy_rec_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(asy_rec_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 312;
      stan::math::validate_non_negative_index("sym_prg_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 313;
      sym_prg_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&sym_prg_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sym_prg_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 314;
      stan::math::validate_non_negative_index("sev_prg_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 315;
      sev_prg_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&sev_prg_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sev_prg_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 316;
      stan::math::validate_non_negative_index("cas_rep_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 317;
      cas_rep_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&cas_rep_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(cas_rep_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 318;
      stan::math::validate_non_negative_index("die_rep_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 319;
      die_rep_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant(Max_delay,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&die_rep_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(die_rep_delay_rv_data__.data(),
        Max_delay);
      current_statement__ = 320;
      stan::math::validate_non_negative_index("cas_cum_report_delay_rv",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 321;
      cas_cum_report_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant((N_weeks
                                         + N_weeks_before),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&cas_cum_report_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(cas_cum_report_delay_rv_data__.data(),
        (N_weeks + N_weeks_before));
      current_statement__ = 322;
      stan::math::validate_non_negative_index("die_cum_report_delay_rv",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 323;
      die_cum_report_delay_rv_data__ = Eigen::Matrix<double,-1,1>::Constant((N_weeks
                                         + N_weeks_before),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&die_cum_report_delay_rv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(die_cum_report_delay_rv_data__.data(),
        (N_weeks + N_weeks_before));
      current_statement__ = 324;
      stan::math::validate_non_negative_index("idx1",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 325;
      idx1 = std::vector<int>((N_weeks + N_weeks_before),
               std::numeric_limits<int>::min());
      current_statement__ = 326;
      stan::math::validate_non_negative_index("idx2",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 327;
      idx2 = std::vector<int>((N_weeks + N_weeks_before),
               std::numeric_limits<int>::min());
      current_statement__ = 328;
      stan::math::validate_non_negative_index("idx3",
        "N_weeks + N_weeks_before", (N_weeks + N_weeks_before));
      current_statement__ = 329;
      idx3_data__ = Eigen::Matrix<double,-1,1>::Constant((N_weeks +
                      N_weeks_before),
                      std::numeric_limits<double>::quiet_NaN());
      new (&idx3) Eigen::Map<Eigen::Matrix<double,-1,1>>(idx3_data__.data(),
        (N_weeks + N_weeks_before));
      current_statement__ = 330;
      N_weeks_tot = (N_weeks + N_weeks_before);
      current_statement__ = 344;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 337;
        if (stan::math::logical_gt((i - Max_delay), 0)) {
          current_statement__ = 334;
          stan::model::assign(idx1, ((i - Max_delay) + 1),
            "assigning variable idx1", stan::model::index_uni(i));
          current_statement__ = 335;
          stan::model::assign(idx2, 1, "assigning variable idx2",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 331;
          stan::model::assign(idx1, 1, "assigning variable idx1",
            stan::model::index_uni(i));
          current_statement__ = 332;
          stan::model::assign(idx2, ((Max_delay - i) + 1),
            "assigning variable idx2", stan::model::index_uni(i));
        }
        current_statement__ = 342;
        if (stan::math::logical_lt(i, (N_weeks_tot - 1))) {
          current_statement__ = 340;
          stan::model::assign(idx3, ((N_weeks_tot - 1) - i),
            "assigning variable idx3", stan::model::index_uni(i));
        } else {
          current_statement__ = 338;
          stan::model::assign(idx3, 1, "assigning variable idx3",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 348;
      for (int i = 1; i <= N_weeks; ++i) {
        current_statement__ = 345;
        stan::model::assign(obs_cas_mvs,
          stan::model::rvalue(obs_cas, "obs_cas", stan::model::index_uni(i)),
          "assigning variable obs_cas_mvs", stan::model::index_uni(i));
        current_statement__ = 346;
        stan::model::assign(obs_hosp_mvs,
          stan::model::rvalue(obs_hosp, "obs_hosp", stan::model::index_uni(i)),
          "assigning variable obs_hosp_mvs", stan::model::index_uni(i));
      }
      current_statement__ = 354;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 349;
        stan::model::assign(inf_prg_delay_rv,
          (stan::math::gamma_cdf(i, inf_prg_delay_shap, inf_prg_delay_rate) -
          stan::math::gamma_cdf((i - 1), inf_prg_delay_shap,
            inf_prg_delay_rate)), "assigning variable inf_prg_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
        current_statement__ = 350;
        stan::model::assign(asy_rec_delay_rv,
          (stan::math::gamma_cdf(i, asy_rec_delay_shap, (asy_rec_delay_rate *
             2)) -
          stan::math::gamma_cdf((i - 1), asy_rec_delay_shap,
            (asy_rec_delay_rate * 2))),
          "assigning variable asy_rec_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
        current_statement__ = 351;
        stan::model::assign(sym_prg_delay_rv,
          (stan::math::gamma_cdf(i, sym_prg_delay_shap, sym_prg_delay_rate) -
          stan::math::gamma_cdf((i - 1), sym_prg_delay_shap,
            sym_prg_delay_rate)), "assigning variable sym_prg_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
        current_statement__ = 352;
        stan::model::assign(sev_prg_delay_rv,
          (stan::math::gamma_cdf(i, sev_prg_delay_shap, sev_prg_delay_rate) -
          stan::math::gamma_cdf((i - 1), sev_prg_delay_shap,
            sev_prg_delay_rate)), "assigning variable sev_prg_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
      }
      current_statement__ = 358;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 355;
        stan::model::assign(cas_rep_delay_rv,
          (stan::math::gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate) -
          stan::math::gamma_cdf((i - 1), cas_rep_delay_shap,
            cas_rep_delay_rate)), "assigning variable cas_rep_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
        current_statement__ = 356;
        stan::model::assign(die_rep_delay_rv,
          (stan::math::gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate) -
          stan::math::gamma_cdf((i - 1), die_rep_delay_shap,
            die_rep_delay_rate)), "assigning variable die_rep_delay_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
      }
      current_statement__ = 359;
      stan::model::assign(inf_prg_delay_rv,
        stan::math::divide(stan::model::deep_copy(inf_prg_delay_rv),
          stan::math::sum(inf_prg_delay_rv)),
        "assigning variable inf_prg_delay_rv");
      current_statement__ = 360;
      stan::model::assign(asy_rec_delay_rv,
        stan::math::divide(stan::model::deep_copy(asy_rec_delay_rv),
          stan::math::sum(asy_rec_delay_rv)),
        "assigning variable asy_rec_delay_rv");
      current_statement__ = 361;
      stan::model::assign(sym_prg_delay_rv,
        stan::math::divide(stan::model::deep_copy(sym_prg_delay_rv),
          stan::math::sum(sym_prg_delay_rv)),
        "assigning variable sym_prg_delay_rv");
      current_statement__ = 362;
      stan::model::assign(sev_prg_delay_rv,
        stan::math::divide(stan::model::deep_copy(sev_prg_delay_rv),
          stan::math::sum(sev_prg_delay_rv)),
        "assigning variable sev_prg_delay_rv");
      current_statement__ = 363;
      stan::model::assign(cas_rep_delay_rv,
        stan::math::divide(stan::model::deep_copy(cas_rep_delay_rv),
          stan::math::sum(cas_rep_delay_rv)),
        "assigning variable cas_rep_delay_rv");
      current_statement__ = 364;
      stan::model::assign(die_rep_delay_rv,
        stan::math::divide(stan::model::deep_copy(die_rep_delay_rv),
          stan::math::sum(die_rep_delay_rv)),
        "assigning variable die_rep_delay_rv");
      current_statement__ = 373;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 371;
        if (stan::math::logical_lt(i, Max_delay)) {
          current_statement__ = 368;
          stan::model::assign(cas_cum_report_delay_rv,
            stan::math::gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate),
            "assigning variable cas_cum_report_delay_rv",
            stan::model::index_uni(((1 + N_weeks_tot) - i)));
          current_statement__ = 369;
          stan::model::assign(die_cum_report_delay_rv,
            stan::math::gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate),
            "assigning variable die_cum_report_delay_rv",
            stan::model::index_uni(((1 + N_weeks_tot) - i)));
        } else {
          current_statement__ = 365;
          stan::model::assign(cas_cum_report_delay_rv, 1.0,
            "assigning variable cas_cum_report_delay_rv",
            stan::model::index_uni(((1 + N_weeks_tot) - i)));
          current_statement__ = 366;
          stan::model::assign(die_cum_report_delay_rv, 1.0,
            "assigning variable die_cum_report_delay_rv",
            stan::model::index_uni(((1 + N_weeks_tot) - i)));
        }
      }
      current_statement__ = 305;
      stan::math::check_greater_or_equal(function__, "obs_cas_mvs",
        obs_cas_mvs, 0);
      current_statement__ = 307;
      stan::math::check_greater_or_equal(function__, "obs_hosp_mvs",
        obs_hosp_mvs, 0);
      current_statement__ = 374;
      stan::math::validate_non_negative_index("spl_par_rt", "N_spl_par_rt",
        N_spl_par_rt);
      current_statement__ = 375;
      stan::math::validate_non_negative_index("spl_par_sym_dx",
        "N_spl_par_dx", N_spl_par_dx);
      current_statement__ = 376;
      stan::math::validate_non_negative_index("log_infections",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 377;
      stan::math::validate_non_negative_index("deriv1_log_infections",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 378;
      stan::math::validate_non_negative_index("infections", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 379;
      stan::math::validate_non_negative_index("susceptible_prvl",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 380;
      stan::math::validate_non_negative_index("population_protection_init",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 381;
      stan::math::validate_non_negative_index("population_protection_inf",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 382;
      stan::math::validate_non_negative_index("population_protection_boost",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 383;
      stan::math::validate_non_negative_index("effective_protection_prvl",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 384;
      stan::math::validate_non_negative_index("logRt0", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 385;
      stan::math::validate_non_negative_index("logRt", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 386;
      stan::math::validate_non_negative_index("r_t", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 387;
      deriv1_spl_par_rt_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 387;
      deriv1_spl_par_rt_1dim__ = (N_spl_par_rt - 1);
      current_statement__ = 387;
      stan::math::validate_non_negative_index("deriv1_spl_par_rt",
        "N_spl_par_rt - 1", deriv1_spl_par_rt_1dim__);
      current_statement__ = 388;
      deriv2_spl_par_rt_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 388;
      deriv2_spl_par_rt_1dim__ = (N_spl_par_rt - 2);
      current_statement__ = 388;
      stan::math::validate_non_negative_index("deriv2_spl_par_rt",
        "N_spl_par_rt - 2", deriv2_spl_par_rt_1dim__);
      current_statement__ = 389;
      stan::math::validate_non_negative_index("p_die_if_sevt", "N_ifr_adj",
        N_ifr_adj);
      current_statement__ = 390;
      stan::math::validate_non_negative_index("p_sev_if_symt", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 391;
      stan::math::validate_non_negative_index("p_sym_if_inft", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 392;
      stan::math::validate_non_negative_index("rr_diag_sym_vs_sev",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 393;
      stan::math::validate_non_negative_index("p_diag_if_asy", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 394;
      stan::math::validate_non_negative_index("p_diag_if_sym", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 395;
      stan::math::validate_non_negative_index("sym_diag_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 396;
      stan::math::validate_non_negative_index("sev_diag_delay_rv",
        "Max_delay", Max_delay);
      current_statement__ = 397;
      stan::math::validate_non_negative_index("symptomatic", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 398;
      stan::math::validate_non_negative_index("severe", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 399;
      stan::math::validate_non_negative_index("deaths", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 400;
      stan::math::validate_non_negative_index("new_asy_dx", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 401;
      stan::math::validate_non_negative_index("diagnoses_of_symptomatic",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 402;
      stan::math::validate_non_negative_index("diagnoses_severe",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 403;
      stan::math::validate_non_negative_index("dx_sym_sev", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 404;
      stan::math::validate_non_negative_index("dx_sym_die", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 405;
      stan::math::validate_non_negative_index("dx_sev_die", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 406;
      stan::math::validate_non_negative_index("diagnoses", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 407;
      stan::math::validate_non_negative_index("deaths_of_diagnosed",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 408;
      stan::math::validate_non_negative_index("fitted_cases", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 409;
      stan::math::validate_non_negative_index("fitted_hospitalizations",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 410;
      stan::math::validate_non_negative_index("fitted_deaths", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 411;
      stan::math::validate_non_negative_index("fitted_cases_mvs",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 412;
      stan::math::validate_non_negative_index("fitted_hospitalizations_mvs",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 413;
      stan::math::validate_non_negative_index("fitted_deaths_mvs",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 414;
      stan::math::validate_non_negative_index("infections_premiere",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 415;
      stan::math::validate_non_negative_index("num_uninf", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 416;
      stan::math::validate_non_negative_index("susceptible_severe_prvl",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 417;
      stan::math::validate_non_negative_index(
        "effective_protection_inf_prvl", "N_weeks_tot", N_weeks_tot);
      current_statement__ = 418;
      stan::math::validate_non_negative_index(
        "effective_protection_inf_vax_prvl", "N_weeks_tot", N_weeks_tot);
      current_statement__ = 419;
      stan::math::validate_non_negative_index(
        "effective_protection_inf_vax_boost_prvl", "N_weeks_tot", N_weeks_tot);
      current_statement__ = 420;
      stan::math::validate_non_negative_index(
        "effective_protection_vax_prvl", "N_weeks_tot", N_weeks_tot);
      current_statement__ = 421;
      stan::math::validate_non_negative_index(
        "effective_protection_vax_boost_prvl", "N_weeks_tot", N_weeks_tot);
      current_statement__ = 422;
      stan::math::validate_non_negative_index("fitted_wastewater_prvl",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 423;
      stan::math::validate_non_negative_index("immunoexposed_cumulative",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 424;
      stan::math::validate_non_negative_index("diag_cases", "N_weeks_tot",
        N_weeks_tot);
      current_statement__ = 425;
      stan::math::validate_non_negative_index("infections_cumulative",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 426;
      stan::math::validate_non_negative_index("seropositive_prvl",
        "N_weeks_tot", N_weeks_tot);
      current_statement__ = 427;
      stan::math::validate_non_negative_index("infect_dist_rv", "Max_delay",
        Max_delay);
      current_statement__ = 428;
      stan::math::validate_non_negative_index("seropos_dist_rv", "Max_delay",
        Max_delay);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + N_spl_par_rt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
      + N_spl_par_dx + 1 + 1 + (3 - 1);
  }
  inline std::string model_name() const final {
    return "model_stan_program_default";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_stan_program_default_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ log_infections_0 = DUMMY_VAR__;
      current_statement__ = 1;
      log_infections_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ serial_i = DUMMY_VAR__;
      current_statement__ = 2;
      serial_i = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_rt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_rt,
          DUMMY_VAR__);
      current_statement__ = 3;
      spl_par_rt = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N_spl_par_rt);
      local_scalar_t__ p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 4;
      p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      local_scalar_t__ new_p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 5;
      new_p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__,
                           jacobian__>(0, 1, lp__);
      local_scalar_t__ p_sev_if_sym = DUMMY_VAR__;
      current_statement__ = 6;
      p_sev_if_sym = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      local_scalar_t__ p_die_if_sev = DUMMY_VAR__;
      current_statement__ = 7;
      p_die_if_sev = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      local_scalar_t__ ifr_decl_OR = DUMMY_VAR__;
      current_statement__ = 8;
      ifr_decl_OR = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      local_scalar_t__ scale_dx_delay_sym = DUMMY_VAR__;
      current_statement__ = 9;
      scale_dx_delay_sym = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      local_scalar_t__ scale_dx_delay_sev = DUMMY_VAR__;
      current_statement__ = 10;
      scale_dx_delay_sev = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      local_scalar_t__ rr_diag_asy_vs_sym = DUMMY_VAR__;
      current_statement__ = 11;
      rr_diag_asy_vs_sym = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      local_scalar_t__ p_diag_if_sev = DUMMY_VAR__;
      current_statement__ = 12;
      p_diag_if_sev = in__.template read_constrain_lub<local_scalar_t__,
                        jacobian__>(0, 1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_sym_dx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_dx,
          DUMMY_VAR__);
      current_statement__ = 13;
      spl_par_sym_dx = in__.template read_constrain_lub<
                         Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                         1, lp__, N_spl_par_dx);
      local_scalar_t__ inv_sqrt_phi_c = DUMMY_VAR__;
      current_statement__ = 14;
      inv_sqrt_phi_c = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      local_scalar_t__ inv_sqrt_phi_h = DUMMY_VAR__;
      current_statement__ = 15;
      inv_sqrt_phi_h = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> prob_vac =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 16;
      prob_vac = in__.template read_constrain_simplex<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, 3);
      Eigen::Matrix<local_scalar_t__,-1,1> log_infections =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> deriv1_log_infections =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> infections =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      local_scalar_t__ ever_inf = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> susceptible_prvl =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> population_protection_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> population_protection_inf =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> population_protection_boost =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> effective_protection_prvl =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> logRt0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> logRt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> r_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> deriv1_spl_par_rt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(deriv1_spl_par_rt_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> deriv2_spl_par_rt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(deriv2_spl_par_rt_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_die_if_sevt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_ifr_adj,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_sev_if_symt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_sym_if_inft =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> rr_diag_sym_vs_sev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_diag_if_asy =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p_diag_if_sym =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sym_diag_delay_rv =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Max_delay,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sev_diag_delay_rv =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Max_delay,
          DUMMY_VAR__);
      local_scalar_t__ p_die_if_inf = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> symptomatic =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> severe =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> deaths =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> new_asy_dx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> diagnoses_of_symptomatic =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> diagnoses_severe =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dx_sym_sev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dx_sym_die =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> dx_sev_die =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> diagnoses =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> deaths_of_diagnosed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_cases =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_hospitalizations =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_deaths =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_cases_mvs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_hospitalizations_mvs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fitted_deaths_mvs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_weeks_tot,
          DUMMY_VAR__);
      local_scalar_t__ phi_cas = DUMMY_VAR__;
      local_scalar_t__ phi_hosp = DUMMY_VAR__;
      current_statement__ = 75;
      stan::model::assign(p_die_if_sevt,
        stan::math::multiply((p_die_if_sev * ifr_adj_fixed),
          stan::math::add(1, stan::math::multiply(ifr_adj, ifr_decl_OR))),
        "assigning variable p_die_if_sevt");
      current_statement__ = 80;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 76;
        stan::model::assign(p_die_if_sevt,
          (stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
             stan::model::index_uni(i)) *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(1)))),
          "assigning variable p_die_if_sevt", stan::model::index_uni(i));
        current_statement__ = 77;
        stan::model::assign(p_sev_if_symt, (p_sev_if_sym *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(2)))),
          "assigning variable p_sev_if_symt", stan::model::index_uni(i));
        current_statement__ = 78;
        stan::model::assign(p_sym_if_inft, (p_sym_if_inf *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(3)))),
          "assigning variable p_sym_if_inft", stan::model::index_uni(i));
      }
      current_statement__ = 81;
      stan::model::assign(rr_diag_sym_vs_sev,
        stan::math::inv_logit(
          stan::math::multiply(spl_basis_dx,
            stan::math::logit(spl_par_sym_dx))),
        "assigning variable rr_diag_sym_vs_sev");
      current_statement__ = 82;
      stan::model::assign(p_diag_if_sym,
        stan::math::multiply(p_diag_if_sev, rr_diag_sym_vs_sev),
        "assigning variable p_diag_if_sym");
      current_statement__ = 83;
      stan::model::assign(p_diag_if_asy,
        stan::math::multiply(p_diag_if_sym, rr_diag_asy_vs_sym),
        "assigning variable p_diag_if_asy");
      {
        current_statement__ = 84;
        stan::math::validate_non_negative_index("sym_delay_gammas",
          "Max_delay + 1", (Max_delay + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> sym_delay_gammas =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((Max_delay + 1),
            DUMMY_VAR__);
        current_statement__ = 86;
        stan::math::validate_non_negative_index("sev_delay_gammas",
          "Max_delay + 1", (Max_delay + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> sev_delay_gammas =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((Max_delay + 1),
            DUMMY_VAR__);
        current_statement__ = 91;
        for (int i = 1; i <= (Max_delay + 1); ++i) {
          current_statement__ = 88;
          stan::model::assign(sym_delay_gammas,
            stan::math::gamma_cdf((i - 1), sym_prg_delay_shap,
              (sym_prg_delay_rate / scale_dx_delay_sym)),
            "assigning variable sym_delay_gammas", stan::model::index_uni(i));
          current_statement__ = 89;
          stan::model::assign(sev_delay_gammas,
            stan::math::gamma_cdf((i - 1), sev_prg_delay_shap,
              (sev_prg_delay_rate / scale_dx_delay_sev)),
            "assigning variable sev_delay_gammas", stan::model::index_uni(i));
        }
        current_statement__ = 95;
        for (int i = 1; i <= Max_delay; ++i) {
          current_statement__ = 92;
          stan::model::assign(sym_diag_delay_rv,
            (stan::model::rvalue(sym_delay_gammas, "sym_delay_gammas",
               stan::model::index_uni((i + 1))) -
            stan::model::rvalue(sym_delay_gammas, "sym_delay_gammas",
              stan::model::index_uni(i))),
            "assigning variable sym_diag_delay_rv",
            stan::model::index_uni(((1 + Max_delay) - i)));
          current_statement__ = 93;
          stan::model::assign(sev_diag_delay_rv,
            (stan::model::rvalue(sev_delay_gammas, "sev_delay_gammas",
               stan::model::index_uni((i + 1))) -
            stan::model::rvalue(sev_delay_gammas, "sev_delay_gammas",
              stan::model::index_uni(i))),
            "assigning variable sev_diag_delay_rv",
            stan::model::index_uni(((1 + Max_delay) - i)));
        }
      }
      current_statement__ = 97;
      p_die_if_inf = ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev);
      current_statement__ = 98;
      stan::model::assign(logRt0,
        stan::math::multiply(spl_basis_rt, spl_par_rt),
        "assigning variable logRt0");
      current_statement__ = 99;
      ever_inf = (pop_size * cum_p_inf_init);
      current_statement__ = 100;
      stan::model::assign(population_protection_init, (pop_size *
        start_p_imm), "assigning variable population_protection_init",
        stan::model::index_uni(1));
      current_statement__ = 105;
      if (stan::math::logical_gt(N_weeks_before, 0)) {
        current_statement__ = 103;
        stan::model::assign(effective_protection_prvl, (pop_size * (1 -
          cum_p_inf_init)), "assigning variable effective_protection_prvl",
          stan::model::index_uni(1));
      } else {
        current_statement__ = 101;
        stan::model::assign(effective_protection_prvl, (pop_size *
          start_p_imm), "assigning variable effective_protection_prvl",
          stan::model::index_uni(1));
      }
      current_statement__ = 106;
      stan::model::assign(susceptible_prvl, (pop_size -
        stan::model::rvalue(effective_protection_prvl,
          "effective_protection_prvl", stan::model::index_uni(1))),
        "assigning variable susceptible_prvl", stan::model::index_uni(1));
      current_statement__ = 128;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 109;
        if (stan::math::logical_gt(i, 1)) {
          current_statement__ = 107;
          stan::model::assign(susceptible_prvl, (pop_size -
            stan::model::rvalue(effective_protection_prvl,
              "effective_protection_prvl", stan::model::index_uni((i - 1)))),
            "assigning variable susceptible_prvl", stan::model::index_uni(i));
        }
        current_statement__ = 112;
        if (stan::math::logical_lt(
              stan::model::rvalue(susceptible_prvl, "susceptible_prvl",
                stan::model::index_uni(i)), 1)) {
          current_statement__ = 110;
          stan::model::assign(susceptible_prvl, 1,
            "assigning variable susceptible_prvl", stan::model::index_uni(i));
        }
        current_statement__ = 113;
        stan::model::assign(logRt,
          (stan::model::rvalue(logRt0, "logRt0", stan::model::index_uni(i)) +
          stan::math::log(
            (stan::model::rvalue(susceptible_prvl, "susceptible_prvl",
               stan::model::index_uni(i)) / pop_size))),
          "assigning variable logRt", stan::model::index_uni(i));
        current_statement__ = 114;
        stan::model::assign(deriv1_log_infections,
          (stan::model::rvalue(logRt, "logRt", stan::model::index_uni(i)) /
          serial_i), "assigning variable deriv1_log_infections",
          stan::model::index_uni(i));
        current_statement__ = 115;
        stan::model::assign(log_infections,
          (stan::math::sum(
             stan::model::rvalue(deriv1_log_infections,
               "deriv1_log_infections", stan::model::index_min_max(1, i))) +
          log_infections_0), "assigning variable log_infections",
          stan::model::index_uni(i));
        current_statement__ = 116;
        stan::model::assign(infections,
          stan::math::exp(
            stan::model::rvalue(log_infections, "log_infections",
              stan::model::index_uni(i))), "assigning variable infections",
          stan::model::index_uni(i));
        current_statement__ = 125;
        if (stan::math::logical_gt(i, N_weeks_before)) {
          current_statement__ = 121;
          stan::model::assign(population_protection_init, ((pop_size *
            start_p_imm) *
            stan::math::exp(((-.008 *
              stan::model::rvalue(idx3, "idx3",
                stan::model::index_uni((((N_weeks_tot - i) + N_weeks_before)
                  + 1)))) * 7))),
            "assigning variable population_protection_init",
            stan::model::index_uni(i));
          current_statement__ = 122;
          stan::model::assign(population_protection_boost,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::math::multiply(
                  stan::model::rvalue(obs_boost, "obs_boost",
                    stan::model::index_min_max(1, (i - N_weeks_before))), .8),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max((((N_weeks_tot - i) +
                          N_weeks_before) + 1), N_weeks_tot))), 7)))),
            "assigning variable population_protection_boost",
            stan::model::index_uni(i));
          current_statement__ = 123;
          stan::model::assign(population_protection_inf,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max((N_weeks_before + 1), i)),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max((((N_weeks_tot - i) +
                          N_weeks_before) + 1), N_weeks_tot))), 7)))),
            "assigning variable population_protection_inf",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 117;
          stan::model::assign(population_protection_init, (pop_size * (1 -
            cum_p_inf_init)),
            "assigning variable population_protection_init",
            stan::model::index_uni(i));
          current_statement__ = 118;
          stan::model::assign(population_protection_boost, 0,
            "assigning variable population_protection_boost",
            stan::model::index_uni(i));
          current_statement__ = 119;
          stan::model::assign(population_protection_inf,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max(1, i)),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max(((N_weeks_before - i) +
                          1), N_weeks_before))), 7)))),
            "assigning variable population_protection_inf",
            stan::model::index_uni(i));
        }
        current_statement__ = 126;
        stan::model::assign(effective_protection_prvl,
          ((stan::model::rvalue(population_protection_init,
              "population_protection_init", stan::model::index_uni(i)) +
          stan::model::rvalue(population_protection_inf,
            "population_protection_inf", stan::model::index_uni(i))) +
          stan::model::rvalue(population_protection_boost,
            "population_protection_boost", stan::model::index_uni(i))),
          "assigning variable effective_protection_prvl",
          stan::model::index_uni(i));
      }
      current_statement__ = 129;
      stan::model::assign(r_t, stan::math::exp(logRt),
        "assigning variable r_t");
      current_statement__ = 130;
      stan::model::assign(deriv2_spl_par_rt,
        stan::math::subtract(
          stan::math::subtract(
            stan::math::multiply(2,
              stan::model::rvalue(spl_par_rt, "spl_par_rt",
                stan::model::index_min_max(2, (N_spl_par_rt - 1)))),
            stan::model::rvalue(spl_par_rt, "spl_par_rt",
              stan::model::index_min_max(1, (N_spl_par_rt - 2)))),
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(3, N_spl_par_rt))),
        "assigning variable deriv2_spl_par_rt",
        stan::model::index_min_max(1, (N_spl_par_rt - 2)));
      current_statement__ = 131;
      stan::model::assign(deriv1_spl_par_rt,
        stan::math::subtract(
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(2, N_spl_par_rt)),
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(1, (N_spl_par_rt - 1)))),
        "assigning variable deriv1_spl_par_rt",
        stan::model::index_min_max(1, (N_spl_par_rt - 1)));
      current_statement__ = 132;
      stan::model::assign(symptomatic,
        stan::math::elt_multiply(p_sym_if_inft,
          conv1d(infections, inf_prg_delay_rv, pstream__)),
        "assigning variable symptomatic");
      current_statement__ = 133;
      stan::model::assign(severe,
        stan::math::elt_multiply(p_sev_if_symt,
          conv1d(symptomatic, sym_prg_delay_rv, pstream__)),
        "assigning variable severe");
      current_statement__ = 134;
      stan::model::assign(deaths,
        stan::math::elt_multiply(
          stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
            stan::model::index_min_max(1, N_weeks_tot)),
          conv1d(severe, sev_prg_delay_rv, pstream__)),
        "assigning variable deaths");
      current_statement__ = 135;
      stan::model::assign(new_asy_dx,
        stan::math::elt_multiply(stan::math::subtract(1, p_sym_if_inft),
          conv1d(stan::math::elt_multiply(infections, p_diag_if_asy),
            asy_rec_delay_rv, pstream__)), "assigning variable new_asy_dx");
      current_statement__ = 136;
      stan::model::assign(diagnoses_of_symptomatic,
        conv1d(stan::math::elt_multiply(symptomatic, p_diag_if_sym),
          sym_diag_delay_rv, pstream__),
        "assigning variable diagnoses_of_symptomatic");
      current_statement__ = 137;
      stan::model::assign(dx_sym_sev,
        stan::math::elt_multiply(p_sev_if_symt,
          conv1d(stan::math::elt_multiply(symptomatic, p_diag_if_sym),
            sym_prg_delay_rv, pstream__)), "assigning variable dx_sym_sev");
      current_statement__ = 138;
      stan::model::assign(dx_sym_die,
        stan::math::elt_multiply(
          stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
            stan::model::index_min_max(1, N_weeks_tot)),
          conv1d(dx_sym_sev, sev_prg_delay_rv, pstream__)),
        "assigning variable dx_sym_die");
      current_statement__ = 139;
      stan::model::assign(diagnoses_severe,
        stan::math::multiply(p_diag_if_sev,
          conv1d(stan::math::subtract(severe, dx_sym_sev), sev_diag_delay_rv,
            pstream__)), "assigning variable diagnoses_severe");
      current_statement__ = 140;
      stan::model::assign(dx_sev_die,
        stan::math::elt_multiply(
          stan::math::multiply(p_diag_if_sev,
            stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
              stan::model::index_min_max(1, N_weeks_tot))),
          conv1d(stan::math::subtract(severe, dx_sym_sev), sev_prg_delay_rv,
            pstream__)), "assigning variable dx_sev_die");
      current_statement__ = 141;
      stan::model::assign(diagnoses,
        stan::math::add(
          stan::math::add(new_asy_dx, diagnoses_of_symptomatic),
          diagnoses_severe), "assigning variable diagnoses");
      current_statement__ = 142;
      stan::model::assign(deaths_of_diagnosed,
        stan::math::add(dx_sym_die, dx_sev_die),
        "assigning variable deaths_of_diagnosed");
      current_statement__ = 145;
      if (stan::math::logical_eq(obs_cas_rep, 1)) {
        current_statement__ = 144;
        stan::model::assign(fitted_cases,
          conv1d(diagnoses, cas_rep_delay_rv, pstream__),
          "assigning variable fitted_cases");
      } else {
        current_statement__ = 143;
        stan::model::assign(fitted_cases,
          stan::math::elt_multiply(diagnoses, cas_cum_report_delay_rv),
          "assigning variable fitted_cases");
      }
      current_statement__ = 146;
      stan::model::assign(fitted_hospitalizations, diagnoses_severe,
        "assigning variable fitted_hospitalizations");
      current_statement__ = 149;
      if (stan::math::logical_eq(obs_die_rep, 1)) {
        current_statement__ = 148;
        stan::model::assign(fitted_deaths,
          conv1d(deaths_of_diagnosed, die_rep_delay_rv, pstream__),
          "assigning variable fitted_deaths");
      } else {
        current_statement__ = 147;
        stan::model::assign(fitted_deaths,
          stan::math::elt_multiply(deaths_of_diagnosed,
            die_cum_report_delay_rv), "assigning variable fitted_deaths");
      }
      current_statement__ = 154;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 150;
        stan::model::assign(fitted_cases_mvs,
          stan::model::rvalue(fitted_cases, "fitted_cases",
            stan::model::index_uni(i)),
          "assigning variable fitted_cases_mvs", stan::model::index_uni(i));
        current_statement__ = 151;
        stan::model::assign(fitted_hospitalizations_mvs,
          stan::model::rvalue(fitted_hospitalizations,
            "fitted_hospitalizations", stan::model::index_uni(i)),
          "assigning variable fitted_hospitalizations_mvs",
          stan::model::index_uni(i));
        current_statement__ = 152;
        stan::model::assign(fitted_deaths_mvs,
          stan::model::rvalue(fitted_deaths, "fitted_deaths",
            stan::model::index_uni(i)),
          "assigning variable fitted_deaths_mvs", stan::model::index_uni(i));
      }
      current_statement__ = 155;
      phi_cas = stan::math::pow(inv_sqrt_phi_c, -2);
      current_statement__ = 156;
      phi_hosp = stan::math::pow(inv_sqrt_phi_h, -2);
      {
        current_statement__ = 180;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(log_infections_0,
                         pri_log_infections_0_mu, pri_log_infections_0_sd));
        current_statement__ = 181;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(spl_par_rt,
                         pri_logRt_mu, pri_logRt_sd));
        current_statement__ = 182;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(serial_i,
                         pri_serial_i_shap, pri_serial_i_rate));
        current_statement__ = 183;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(deriv1_spl_par_rt,
                         0, pri_deriv1_spl_par_sd));
        current_statement__ = 184;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(deriv2_spl_par_rt,
                         0, pri_deriv2_spl_par_sd));
        current_statement__ = 185;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p_sym_if_inf,
                         pri_p_sym_if_inf_a, pri_p_sym_if_inf_b));
        current_statement__ = 186;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(new_p_sym_if_inf,
                         pri_new_p_sym_if_inf_a, pri_new_p_sym_if_inf_b));
        current_statement__ = 187;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p_sev_if_sym,
                         pri_p_sev_if_sym_a, pri_p_sev_if_sym_b));
        current_statement__ = 188;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p_die_if_sev,
                         pri_p_die_if_sev_a, pri_p_die_if_sev_b));
        current_statement__ = 189;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(ifr_decl_OR,
                         pri_ifr_decl_OR_a, pri_ifr_decl_OR_b));
        current_statement__ = 190;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p_die_if_inf,
                         pri_p_die_if_inf_a, pri_p_die_if_inf_b));
        current_statement__ = 191;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(rr_diag_asy_vs_sym,
                         pri_rr_diag_asy_vs_sym_a, pri_rr_diag_asy_vs_sym_b));
        current_statement__ = 192;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(spl_par_sym_dx,
                         pri_rr_diag_sym_vs_sev_a, pri_rr_diag_sym_vs_sev_b));
        current_statement__ = 193;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p_diag_if_sev,
                         pri_p_diag_if_sev_a, pri_p_diag_if_sev_b));
        current_statement__ = 194;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(scale_dx_delay_sym,
                         scale_dx_delay_sym_a, scale_dx_delay_sym_b));
        current_statement__ = 195;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(scale_dx_delay_sev,
                         scale_dx_delay_sev_a, scale_dx_delay_sev_b));
        current_statement__ = 196;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(inv_sqrt_phi_c, 0, 1));
        current_statement__ = 197;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(inv_sqrt_phi_h, 0, 1));
        current_statement__ = 198;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(prob_vac,
                         stan::math::rep_vector(5, 3)));
        current_statement__ = 208;
        if (stan::math::logical_eq(pre_period_zero, 1)) {
          current_statement__ = 206;
          if (stan::math::logical_gt(N_weeks_before, 0)) {
            current_statement__ = 200;
            if (stan::math::logical_lt(
                  stan::math::sum(
                    stan::model::rvalue(fitted_cases, "fitted_cases",
                      stan::model::index_min_max(1, N_weeks_before))), 0)) {
              current_statement__ = 199;
              std::stringstream errmsg_stream__;
              stan::math::stan_print(&errmsg_stream__,
                "`sum(fitted_cases[1:N_weeks_before])` had a negative value");
              throw std::domain_error(errmsg_stream__.str());
            }
            current_statement__ = 202;
            if (stan::math::logical_lt(
                  stan::math::sum(
                    stan::model::rvalue(fitted_hospitalizations,
                      "fitted_hospitalizations",
                      stan::model::index_min_max(1, N_weeks_before))), 0)) {
              current_statement__ = 201;
              std::stringstream errmsg_stream__;
              stan::math::stan_print(&errmsg_stream__,
                "`sum(fitted_hospitalizations[1:N_weeks_before])` had a negative value");
              throw std::domain_error(errmsg_stream__.str());
            }
            current_statement__ = 203;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(0,
                             stan::math::sum(
                               stan::model::rvalue(fitted_cases,
                                 "fitted_cases",
                                 stan::model::index_min_max(1, N_weeks_before))),
                             phi_cas));
            current_statement__ = 204;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(0,
                             stan::math::sum(
                               stan::model::rvalue(fitted_hospitalizations,
                                 "fitted_hospitalizations",
                                 stan::model::index_min_max(1,
                                   (N_weeks_before + 4)))), phi_hosp));
          }
        }
        current_statement__ = 210;
        if (stan::math::logical_lt(stan::math::min(fitted_cases), 0)) {
          current_statement__ = 209;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "`fitted_cases` had a negative value");
          throw std::domain_error(errmsg_stream__.str());
        }
        current_statement__ = 212;
        if (stan::math::logical_lt(stan::math::min(fitted_hospitalizations),
              0)) {
          current_statement__ = 211;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "`fitted_hospitalizations` had a negative value");
          throw std::domain_error(errmsg_stream__.str());
        }
        current_statement__ = 213;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(
                         stan::model::rvalue(obs_cas_mvs, "obs_cas_mvs",
                           stan::model::index_min_max(1, lastCaseWeek)),
                         stan::model::rvalue(fitted_cases_mvs,
                           "fitted_cases_mvs",
                           stan::model::index_min_max((N_weeks_before + 1),
                             (N_weeks_before + lastCaseWeek))), phi_cas));
        current_statement__ = 214;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(
                         stan::model::rvalue(obs_hosp_mvs, "obs_hosp_mvs",
                           stan::model::index_min_max(5, lastHospWeek)),
                         stan::model::rvalue(fitted_hospitalizations_mvs,
                           "fitted_hospitalizations_mvs",
                           stan::model::index_min_max((N_weeks_before + 5),
                             (N_weeks_before + lastHospWeek))), phi_hosp));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_stan_program_default_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double log_infections_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      log_infections_0 = in__.template read<local_scalar_t__>();
      double serial_i = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      serial_i = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> spl_par_rt =
        Eigen::Matrix<double,-1,1>::Constant(N_spl_par_rt,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      spl_par_rt = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N_spl_par_rt);
      double p_sym_if_inf = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      double new_p_sym_if_inf = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      new_p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__,
                           jacobian__>(0, 1, lp__);
      double p_sev_if_sym = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      p_sev_if_sym = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      double p_die_if_sev = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      p_die_if_sev = in__.template read_constrain_lub<local_scalar_t__,
                       jacobian__>(0, 1, lp__);
      double ifr_decl_OR = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      ifr_decl_OR = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      double scale_dx_delay_sym = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      scale_dx_delay_sym = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      double scale_dx_delay_sev = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      scale_dx_delay_sev = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      double rr_diag_asy_vs_sym = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      rr_diag_asy_vs_sym = in__.template read_constrain_lub<local_scalar_t__,
                             jacobian__>(0, 1, lp__);
      double p_diag_if_sev = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      p_diag_if_sev = in__.template read_constrain_lub<local_scalar_t__,
                        jacobian__>(0, 1, lp__);
      Eigen::Matrix<double,-1,1> spl_par_sym_dx =
        Eigen::Matrix<double,-1,1>::Constant(N_spl_par_dx,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      spl_par_sym_dx = in__.template read_constrain_lub<
                         Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                         1, lp__, N_spl_par_dx);
      double inv_sqrt_phi_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      inv_sqrt_phi_c = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      double inv_sqrt_phi_h = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      inv_sqrt_phi_h = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> prob_vac =
        Eigen::Matrix<double,-1,1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      prob_vac = in__.template read_constrain_simplex<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, 3);
      Eigen::Matrix<double,-1,1> log_infections =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> deriv1_log_infections =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> infections =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      double ever_inf = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> susceptible_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> population_protection_init =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> population_protection_inf =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> population_protection_boost =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> logRt0 =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> logRt =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> r_t =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> deriv1_spl_par_rt =
        Eigen::Matrix<double,-1,1>::Constant(deriv1_spl_par_rt_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> deriv2_spl_par_rt =
        Eigen::Matrix<double,-1,1>::Constant(deriv2_spl_par_rt_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_die_if_sevt =
        Eigen::Matrix<double,-1,1>::Constant(N_ifr_adj,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_sev_if_symt =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_sym_if_inft =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> rr_diag_sym_vs_sev =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_diag_if_asy =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p_diag_if_sym =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sym_diag_delay_rv =
        Eigen::Matrix<double,-1,1>::Constant(Max_delay,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sev_diag_delay_rv =
        Eigen::Matrix<double,-1,1>::Constant(Max_delay,
          std::numeric_limits<double>::quiet_NaN());
      double p_die_if_inf = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> symptomatic =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> severe =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> deaths =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> new_asy_dx =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> diagnoses_of_symptomatic =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> diagnoses_severe =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dx_sym_sev =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dx_sym_die =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dx_sev_die =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> diagnoses =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> deaths_of_diagnosed =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_cases =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_hospitalizations =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_deaths =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_cases_mvs =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_hospitalizations_mvs =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_deaths_mvs =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      double phi_cas = std::numeric_limits<double>::quiet_NaN();
      double phi_hosp = std::numeric_limits<double>::quiet_NaN();
      out__.write(log_infections_0);
      out__.write(serial_i);
      out__.write(spl_par_rt);
      out__.write(p_sym_if_inf);
      out__.write(new_p_sym_if_inf);
      out__.write(p_sev_if_sym);
      out__.write(p_die_if_sev);
      out__.write(ifr_decl_OR);
      out__.write(scale_dx_delay_sym);
      out__.write(scale_dx_delay_sev);
      out__.write(rr_diag_asy_vs_sym);
      out__.write(p_diag_if_sev);
      out__.write(spl_par_sym_dx);
      out__.write(inv_sqrt_phi_c);
      out__.write(inv_sqrt_phi_h);
      out__.write(prob_vac);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 75;
      stan::model::assign(p_die_if_sevt,
        stan::math::multiply((p_die_if_sev * ifr_adj_fixed),
          stan::math::add(1, stan::math::multiply(ifr_adj, ifr_decl_OR))),
        "assigning variable p_die_if_sevt");
      current_statement__ = 80;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 76;
        stan::model::assign(p_die_if_sevt,
          (stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
             stan::model::index_uni(i)) *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(1)))),
          "assigning variable p_die_if_sevt", stan::model::index_uni(i));
        current_statement__ = 77;
        stan::model::assign(p_sev_if_symt, (p_sev_if_sym *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(2)))),
          "assigning variable p_sev_if_symt", stan::model::index_uni(i));
        current_statement__ = 78;
        stan::model::assign(p_sym_if_inft, (p_sym_if_inf *
          stan::math::pow(
            stan::model::rvalue(ifr_vac_adj, "ifr_vac_adj",
              stan::model::index_uni(i)),
            stan::model::rvalue(prob_vac, "prob_vac",
              stan::model::index_uni(3)))),
          "assigning variable p_sym_if_inft", stan::model::index_uni(i));
      }
      current_statement__ = 81;
      stan::model::assign(rr_diag_sym_vs_sev,
        stan::math::inv_logit(
          stan::math::multiply(spl_basis_dx,
            stan::math::logit(spl_par_sym_dx))),
        "assigning variable rr_diag_sym_vs_sev");
      current_statement__ = 82;
      stan::model::assign(p_diag_if_sym,
        stan::math::multiply(p_diag_if_sev, rr_diag_sym_vs_sev),
        "assigning variable p_diag_if_sym");
      current_statement__ = 83;
      stan::model::assign(p_diag_if_asy,
        stan::math::multiply(p_diag_if_sym, rr_diag_asy_vs_sym),
        "assigning variable p_diag_if_asy");
      {
        current_statement__ = 84;
        stan::math::validate_non_negative_index("sym_delay_gammas",
          "Max_delay + 1", (Max_delay + 1));
        Eigen::Matrix<double,-1,1> sym_delay_gammas =
          Eigen::Matrix<double,-1,1>::Constant((Max_delay + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 86;
        stan::math::validate_non_negative_index("sev_delay_gammas",
          "Max_delay + 1", (Max_delay + 1));
        Eigen::Matrix<double,-1,1> sev_delay_gammas =
          Eigen::Matrix<double,-1,1>::Constant((Max_delay + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 91;
        for (int i = 1; i <= (Max_delay + 1); ++i) {
          current_statement__ = 88;
          stan::model::assign(sym_delay_gammas,
            stan::math::gamma_cdf((i - 1), sym_prg_delay_shap,
              (sym_prg_delay_rate / scale_dx_delay_sym)),
            "assigning variable sym_delay_gammas", stan::model::index_uni(i));
          current_statement__ = 89;
          stan::model::assign(sev_delay_gammas,
            stan::math::gamma_cdf((i - 1), sev_prg_delay_shap,
              (sev_prg_delay_rate / scale_dx_delay_sev)),
            "assigning variable sev_delay_gammas", stan::model::index_uni(i));
        }
        current_statement__ = 95;
        for (int i = 1; i <= Max_delay; ++i) {
          current_statement__ = 92;
          stan::model::assign(sym_diag_delay_rv,
            (stan::model::rvalue(sym_delay_gammas, "sym_delay_gammas",
               stan::model::index_uni((i + 1))) -
            stan::model::rvalue(sym_delay_gammas, "sym_delay_gammas",
              stan::model::index_uni(i))),
            "assigning variable sym_diag_delay_rv",
            stan::model::index_uni(((1 + Max_delay) - i)));
          current_statement__ = 93;
          stan::model::assign(sev_diag_delay_rv,
            (stan::model::rvalue(sev_delay_gammas, "sev_delay_gammas",
               stan::model::index_uni((i + 1))) -
            stan::model::rvalue(sev_delay_gammas, "sev_delay_gammas",
              stan::model::index_uni(i))),
            "assigning variable sev_diag_delay_rv",
            stan::model::index_uni(((1 + Max_delay) - i)));
        }
      }
      current_statement__ = 97;
      p_die_if_inf = ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev);
      current_statement__ = 98;
      stan::model::assign(logRt0,
        stan::math::multiply(spl_basis_rt, spl_par_rt),
        "assigning variable logRt0");
      current_statement__ = 99;
      ever_inf = (pop_size * cum_p_inf_init);
      current_statement__ = 100;
      stan::model::assign(population_protection_init, (pop_size *
        start_p_imm), "assigning variable population_protection_init",
        stan::model::index_uni(1));
      current_statement__ = 105;
      if (stan::math::logical_gt(N_weeks_before, 0)) {
        current_statement__ = 103;
        stan::model::assign(effective_protection_prvl, (pop_size * (1 -
          cum_p_inf_init)), "assigning variable effective_protection_prvl",
          stan::model::index_uni(1));
      } else {
        current_statement__ = 101;
        stan::model::assign(effective_protection_prvl, (pop_size *
          start_p_imm), "assigning variable effective_protection_prvl",
          stan::model::index_uni(1));
      }
      current_statement__ = 106;
      stan::model::assign(susceptible_prvl, (pop_size -
        stan::model::rvalue(effective_protection_prvl,
          "effective_protection_prvl", stan::model::index_uni(1))),
        "assigning variable susceptible_prvl", stan::model::index_uni(1));
      current_statement__ = 128;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 109;
        if (stan::math::logical_gt(i, 1)) {
          current_statement__ = 107;
          stan::model::assign(susceptible_prvl, (pop_size -
            stan::model::rvalue(effective_protection_prvl,
              "effective_protection_prvl", stan::model::index_uni((i - 1)))),
            "assigning variable susceptible_prvl", stan::model::index_uni(i));
        }
        current_statement__ = 112;
        if (stan::math::logical_lt(
              stan::model::rvalue(susceptible_prvl, "susceptible_prvl",
                stan::model::index_uni(i)), 1)) {
          current_statement__ = 110;
          stan::model::assign(susceptible_prvl, 1,
            "assigning variable susceptible_prvl", stan::model::index_uni(i));
        }
        current_statement__ = 113;
        stan::model::assign(logRt,
          (stan::model::rvalue(logRt0, "logRt0", stan::model::index_uni(i)) +
          stan::math::log(
            (stan::model::rvalue(susceptible_prvl, "susceptible_prvl",
               stan::model::index_uni(i)) / pop_size))),
          "assigning variable logRt", stan::model::index_uni(i));
        current_statement__ = 114;
        stan::model::assign(deriv1_log_infections,
          (stan::model::rvalue(logRt, "logRt", stan::model::index_uni(i)) /
          serial_i), "assigning variable deriv1_log_infections",
          stan::model::index_uni(i));
        current_statement__ = 115;
        stan::model::assign(log_infections,
          (stan::math::sum(
             stan::model::rvalue(deriv1_log_infections,
               "deriv1_log_infections", stan::model::index_min_max(1, i))) +
          log_infections_0), "assigning variable log_infections",
          stan::model::index_uni(i));
        current_statement__ = 116;
        stan::model::assign(infections,
          stan::math::exp(
            stan::model::rvalue(log_infections, "log_infections",
              stan::model::index_uni(i))), "assigning variable infections",
          stan::model::index_uni(i));
        current_statement__ = 125;
        if (stan::math::logical_gt(i, N_weeks_before)) {
          current_statement__ = 121;
          stan::model::assign(population_protection_init, ((pop_size *
            start_p_imm) *
            stan::math::exp(((-.008 *
              stan::model::rvalue(idx3, "idx3",
                stan::model::index_uni((((N_weeks_tot - i) + N_weeks_before)
                  + 1)))) * 7))),
            "assigning variable population_protection_init",
            stan::model::index_uni(i));
          current_statement__ = 122;
          stan::model::assign(population_protection_boost,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::math::multiply(
                  stan::model::rvalue(obs_boost, "obs_boost",
                    stan::model::index_min_max(1, (i - N_weeks_before))), .8),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max((((N_weeks_tot - i) +
                          N_weeks_before) + 1), N_weeks_tot))), 7)))),
            "assigning variable population_protection_boost",
            stan::model::index_uni(i));
          current_statement__ = 123;
          stan::model::assign(population_protection_inf,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max((N_weeks_before + 1), i)),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max((((N_weeks_tot - i) +
                          N_weeks_before) + 1), N_weeks_tot))), 7)))),
            "assigning variable population_protection_inf",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 117;
          stan::model::assign(population_protection_init, (pop_size * (1 -
            cum_p_inf_init)),
            "assigning variable population_protection_init",
            stan::model::index_uni(i));
          current_statement__ = 118;
          stan::model::assign(population_protection_boost, 0,
            "assigning variable population_protection_boost",
            stan::model::index_uni(i));
          current_statement__ = 119;
          stan::model::assign(population_protection_inf,
            stan::math::sum(
              stan::math::elt_multiply(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max(1, i)),
                stan::math::exp(
                  stan::math::multiply(
                    stan::math::multiply(-.008,
                      stan::model::rvalue(idx3, "idx3",
                        stan::model::index_min_max(((N_weeks_before - i) +
                          1), N_weeks_before))), 7)))),
            "assigning variable population_protection_inf",
            stan::model::index_uni(i));
        }
        current_statement__ = 126;
        stan::model::assign(effective_protection_prvl,
          ((stan::model::rvalue(population_protection_init,
              "population_protection_init", stan::model::index_uni(i)) +
          stan::model::rvalue(population_protection_inf,
            "population_protection_inf", stan::model::index_uni(i))) +
          stan::model::rvalue(population_protection_boost,
            "population_protection_boost", stan::model::index_uni(i))),
          "assigning variable effective_protection_prvl",
          stan::model::index_uni(i));
      }
      current_statement__ = 129;
      stan::model::assign(r_t, stan::math::exp(logRt),
        "assigning variable r_t");
      current_statement__ = 130;
      stan::model::assign(deriv2_spl_par_rt,
        stan::math::subtract(
          stan::math::subtract(
            stan::math::multiply(2,
              stan::model::rvalue(spl_par_rt, "spl_par_rt",
                stan::model::index_min_max(2, (N_spl_par_rt - 1)))),
            stan::model::rvalue(spl_par_rt, "spl_par_rt",
              stan::model::index_min_max(1, (N_spl_par_rt - 2)))),
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(3, N_spl_par_rt))),
        "assigning variable deriv2_spl_par_rt",
        stan::model::index_min_max(1, (N_spl_par_rt - 2)));
      current_statement__ = 131;
      stan::model::assign(deriv1_spl_par_rt,
        stan::math::subtract(
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(2, N_spl_par_rt)),
          stan::model::rvalue(spl_par_rt, "spl_par_rt",
            stan::model::index_min_max(1, (N_spl_par_rt - 1)))),
        "assigning variable deriv1_spl_par_rt",
        stan::model::index_min_max(1, (N_spl_par_rt - 1)));
      current_statement__ = 132;
      stan::model::assign(symptomatic,
        stan::math::elt_multiply(p_sym_if_inft,
          conv1d(infections, inf_prg_delay_rv, pstream__)),
        "assigning variable symptomatic");
      current_statement__ = 133;
      stan::model::assign(severe,
        stan::math::elt_multiply(p_sev_if_symt,
          conv1d(symptomatic, sym_prg_delay_rv, pstream__)),
        "assigning variable severe");
      current_statement__ = 134;
      stan::model::assign(deaths,
        stan::math::elt_multiply(
          stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
            stan::model::index_min_max(1, N_weeks_tot)),
          conv1d(severe, sev_prg_delay_rv, pstream__)),
        "assigning variable deaths");
      current_statement__ = 135;
      stan::model::assign(new_asy_dx,
        stan::math::elt_multiply(stan::math::subtract(1, p_sym_if_inft),
          conv1d(stan::math::elt_multiply(infections, p_diag_if_asy),
            asy_rec_delay_rv, pstream__)), "assigning variable new_asy_dx");
      current_statement__ = 136;
      stan::model::assign(diagnoses_of_symptomatic,
        conv1d(stan::math::elt_multiply(symptomatic, p_diag_if_sym),
          sym_diag_delay_rv, pstream__),
        "assigning variable diagnoses_of_symptomatic");
      current_statement__ = 137;
      stan::model::assign(dx_sym_sev,
        stan::math::elt_multiply(p_sev_if_symt,
          conv1d(stan::math::elt_multiply(symptomatic, p_diag_if_sym),
            sym_prg_delay_rv, pstream__)), "assigning variable dx_sym_sev");
      current_statement__ = 138;
      stan::model::assign(dx_sym_die,
        stan::math::elt_multiply(
          stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
            stan::model::index_min_max(1, N_weeks_tot)),
          conv1d(dx_sym_sev, sev_prg_delay_rv, pstream__)),
        "assigning variable dx_sym_die");
      current_statement__ = 139;
      stan::model::assign(diagnoses_severe,
        stan::math::multiply(p_diag_if_sev,
          conv1d(stan::math::subtract(severe, dx_sym_sev), sev_diag_delay_rv,
            pstream__)), "assigning variable diagnoses_severe");
      current_statement__ = 140;
      stan::model::assign(dx_sev_die,
        stan::math::elt_multiply(
          stan::math::multiply(p_diag_if_sev,
            stan::model::rvalue(p_die_if_sevt, "p_die_if_sevt",
              stan::model::index_min_max(1, N_weeks_tot))),
          conv1d(stan::math::subtract(severe, dx_sym_sev), sev_prg_delay_rv,
            pstream__)), "assigning variable dx_sev_die");
      current_statement__ = 141;
      stan::model::assign(diagnoses,
        stan::math::add(
          stan::math::add(new_asy_dx, diagnoses_of_symptomatic),
          diagnoses_severe), "assigning variable diagnoses");
      current_statement__ = 142;
      stan::model::assign(deaths_of_diagnosed,
        stan::math::add(dx_sym_die, dx_sev_die),
        "assigning variable deaths_of_diagnosed");
      current_statement__ = 145;
      if (stan::math::logical_eq(obs_cas_rep, 1)) {
        current_statement__ = 144;
        stan::model::assign(fitted_cases,
          conv1d(diagnoses, cas_rep_delay_rv, pstream__),
          "assigning variable fitted_cases");
      } else {
        current_statement__ = 143;
        stan::model::assign(fitted_cases,
          stan::math::elt_multiply(diagnoses, cas_cum_report_delay_rv),
          "assigning variable fitted_cases");
      }
      current_statement__ = 146;
      stan::model::assign(fitted_hospitalizations, diagnoses_severe,
        "assigning variable fitted_hospitalizations");
      current_statement__ = 149;
      if (stan::math::logical_eq(obs_die_rep, 1)) {
        current_statement__ = 148;
        stan::model::assign(fitted_deaths,
          conv1d(deaths_of_diagnosed, die_rep_delay_rv, pstream__),
          "assigning variable fitted_deaths");
      } else {
        current_statement__ = 147;
        stan::model::assign(fitted_deaths,
          stan::math::elt_multiply(deaths_of_diagnosed,
            die_cum_report_delay_rv), "assigning variable fitted_deaths");
      }
      current_statement__ = 154;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 150;
        stan::model::assign(fitted_cases_mvs,
          stan::model::rvalue(fitted_cases, "fitted_cases",
            stan::model::index_uni(i)),
          "assigning variable fitted_cases_mvs", stan::model::index_uni(i));
        current_statement__ = 151;
        stan::model::assign(fitted_hospitalizations_mvs,
          stan::model::rvalue(fitted_hospitalizations,
            "fitted_hospitalizations", stan::model::index_uni(i)),
          "assigning variable fitted_hospitalizations_mvs",
          stan::model::index_uni(i));
        current_statement__ = 152;
        stan::model::assign(fitted_deaths_mvs,
          stan::model::rvalue(fitted_deaths, "fitted_deaths",
            stan::model::index_uni(i)),
          "assigning variable fitted_deaths_mvs", stan::model::index_uni(i));
      }
      current_statement__ = 155;
      phi_cas = stan::math::pow(inv_sqrt_phi_c, -2);
      current_statement__ = 156;
      phi_hosp = stan::math::pow(inv_sqrt_phi_h, -2);
      if (emit_transformed_parameters__) {
        out__.write(log_infections);
        out__.write(deriv1_log_infections);
        out__.write(infections);
        out__.write(ever_inf);
        out__.write(susceptible_prvl);
        out__.write(population_protection_init);
        out__.write(population_protection_inf);
        out__.write(population_protection_boost);
        out__.write(effective_protection_prvl);
        out__.write(logRt0);
        out__.write(logRt);
        out__.write(r_t);
        out__.write(deriv1_spl_par_rt);
        out__.write(deriv2_spl_par_rt);
        out__.write(p_die_if_sevt);
        out__.write(p_sev_if_symt);
        out__.write(p_sym_if_inft);
        out__.write(rr_diag_sym_vs_sev);
        out__.write(p_diag_if_asy);
        out__.write(p_diag_if_sym);
        out__.write(sym_diag_delay_rv);
        out__.write(sev_diag_delay_rv);
        out__.write(p_die_if_inf);
        out__.write(symptomatic);
        out__.write(severe);
        out__.write(deaths);
        out__.write(new_asy_dx);
        out__.write(diagnoses_of_symptomatic);
        out__.write(diagnoses_severe);
        out__.write(dx_sym_sev);
        out__.write(dx_sym_die);
        out__.write(dx_sev_die);
        out__.write(diagnoses);
        out__.write(deaths_of_diagnosed);
        out__.write(fitted_cases);
        out__.write(fitted_hospitalizations);
        out__.write(fitted_deaths);
        out__.write(fitted_cases_mvs);
        out__.write(fitted_hospitalizations_mvs);
        out__.write(fitted_deaths_mvs);
        out__.write(phi_cas);
        out__.write(phi_hosp);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> infections_premiere =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> num_uninf =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      double p_die_if_sym = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> susceptible_severe_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_inf_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_inf_vax_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_inf_vax_boost_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_vax_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> effective_protection_vax_boost_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fitted_wastewater_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> immunoexposed_cumulative =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> diag_cases =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> infections_cumulative =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> seropositive_prvl =
        Eigen::Matrix<double,-1,1>::Constant(N_weeks_tot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> infect_dist_rv =
        Eigen::Matrix<double,-1,1>::Constant(Max_delay,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> seropos_dist_rv =
        Eigen::Matrix<double,-1,1>::Constant(Max_delay,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 157;
      stan::model::assign(num_uninf, (pop_size * (1.0 - cum_p_inf_init)),
        "assigning variable num_uninf", stan::model::index_uni(1));
      current_statement__ = 158;
      stan::model::assign(effective_protection_inf_prvl, (pop_size *
        start_p_imm), "assigning variable effective_protection_inf_prvl",
        stan::model::index_uni(1));
      current_statement__ = 171;
      for (int i = 1; i <= N_weeks_tot; ++i) {
        current_statement__ = 162;
        if (stan::math::logical_gt(i, 1)) {
          current_statement__ = 159;
          stan::model::assign(num_uninf,
            (stan::model::rvalue(num_uninf, "num_uninf",
               stan::model::index_uni((i - 1))) -
            stan::model::rvalue(infections_premiere, "infections_premiere",
              stan::model::index_uni((i - 1)))),
            "assigning variable num_uninf", stan::model::index_uni(i));
          current_statement__ = 160;
          stan::model::assign(effective_protection_inf_prvl,
            (stan::model::rvalue(population_protection_init,
               "population_protection_init", stan::model::index_uni((i - 1)))
            +
            stan::model::rvalue(population_protection_inf,
              "population_protection_inf", stan::model::index_uni((i - 1)))),
            "assigning variable effective_protection_inf_prvl",
            stan::model::index_uni(i));
        }
        current_statement__ = 165;
        if (stan::math::logical_lt(
              stan::model::rvalue(num_uninf, "num_uninf",
                stan::model::index_uni(i)), 0)) {
          current_statement__ = 163;
          stan::model::assign(num_uninf, 0, "assigning variable num_uninf",
            stan::model::index_uni(i));
        }
        current_statement__ = 168;
        if (stan::math::logical_gt(
              stan::model::rvalue(effective_protection_inf_prvl,
                "effective_protection_inf_prvl", stan::model::index_uni(i)),
              pop_size)) {
          current_statement__ = 166;
          stan::model::assign(effective_protection_inf_prvl, (pop_size - 1),
            "assigning variable effective_protection_inf_prvl",
            stan::model::index_uni(i));
        }
        current_statement__ = 169;
        stan::model::assign(infections_premiere,
          (stan::model::rvalue(infections, "infections",
             stan::model::index_uni(i)) *
          (stan::model::rvalue(num_uninf, "num_uninf",
             stan::model::index_uni(i)) / ((pop_size -
          stan::model::rvalue(effective_protection_inf_prvl,
            "effective_protection_inf_prvl", stan::model::index_uni(i))) +
          stan::model::rvalue(num_uninf, "num_uninf",
            stan::model::index_uni(i))))),
          "assigning variable infections_premiere", stan::model::index_uni(i));
      }
      current_statement__ = 172;
      stan::model::assign(infections_cumulative,
        stan::math::add(
          stan::math::cumulative_sum(
            stan::model::rvalue(infections, "infections",
              stan::model::index_min((N_weeks_before + 1)))), (cum_p_inf_init
          * pop_size)), "assigning variable infections_cumulative",
        stan::model::index_min((N_weeks_before + 1)));
      current_statement__ = 173;
      p_die_if_sym = (p_die_if_sev * p_sev_if_sym);
      current_statement__ = 174;
      stan::model::assign(diag_cases,
        stan::math::add(diagnoses_of_symptomatic, diagnoses_severe),
        "assigning variable diag_cases");
      current_statement__ = 176;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 175;
        stan::model::assign(infect_dist_rv,
          (stan::math::gamma_cdf(i, infect_dist_shap, infect_dist_rate) -
          stan::math::gamma_cdf((i - 1), infect_dist_shap, infect_dist_rate)),
          "assigning variable infect_dist_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
      }
      current_statement__ = 178;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 177;
        stan::model::assign(seropos_dist_rv, (1.0 -
          stan::math::gamma_cdf(i, seropos_dist_shap, seropos_dist_rate)),
          "assigning variable seropos_dist_rv",
          stan::model::index_uni(((1 + Max_delay) - i)));
      }
      current_statement__ = 179;
      stan::model::assign(seropositive_prvl,
        conv1d(infections, seropos_dist_rv, pstream__),
        "assigning variable seropositive_prvl");
      out__.write(infections_premiere);
      out__.write(num_uninf);
      out__.write(p_die_if_sym);
      out__.write(susceptible_severe_prvl);
      out__.write(effective_protection_inf_prvl);
      out__.write(effective_protection_inf_vax_prvl);
      out__.write(effective_protection_inf_vax_boost_prvl);
      out__.write(effective_protection_vax_prvl);
      out__.write(effective_protection_vax_boost_prvl);
      out__.write(fitted_wastewater_prvl);
      out__.write(immunoexposed_cumulative);
      out__.write(diag_cases);
      out__.write(infections_cumulative);
      out__.write(seropositive_prvl);
      out__.write(infect_dist_rv);
      out__.write(seropos_dist_rv);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ log_infections_0 = DUMMY_VAR__;
      current_statement__ = 1;
      log_infections_0 = in__.read<local_scalar_t__>();
      out__.write(log_infections_0);
      local_scalar_t__ serial_i = DUMMY_VAR__;
      current_statement__ = 2;
      serial_i = in__.read<local_scalar_t__>();
      out__.write(serial_i);
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_rt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_rt,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(spl_par_rt,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_spl_par_rt),
        "assigning variable spl_par_rt");
      out__.write(spl_par_rt);
      local_scalar_t__ p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 4;
      p_sym_if_inf = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_sym_if_inf);
      local_scalar_t__ new_p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 5;
      new_p_sym_if_inf = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, new_p_sym_if_inf);
      local_scalar_t__ p_sev_if_sym = DUMMY_VAR__;
      current_statement__ = 6;
      p_sev_if_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_sev_if_sym);
      local_scalar_t__ p_die_if_sev = DUMMY_VAR__;
      current_statement__ = 7;
      p_die_if_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_die_if_sev);
      local_scalar_t__ ifr_decl_OR = DUMMY_VAR__;
      current_statement__ = 8;
      ifr_decl_OR = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ifr_decl_OR);
      local_scalar_t__ scale_dx_delay_sym = DUMMY_VAR__;
      current_statement__ = 9;
      scale_dx_delay_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, scale_dx_delay_sym);
      local_scalar_t__ scale_dx_delay_sev = DUMMY_VAR__;
      current_statement__ = 10;
      scale_dx_delay_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, scale_dx_delay_sev);
      local_scalar_t__ rr_diag_asy_vs_sym = DUMMY_VAR__;
      current_statement__ = 11;
      rr_diag_asy_vs_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rr_diag_asy_vs_sym);
      local_scalar_t__ p_diag_if_sev = DUMMY_VAR__;
      current_statement__ = 12;
      p_diag_if_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_diag_if_sev);
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_sym_dx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_dx,
          DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(spl_par_sym_dx,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_spl_par_dx),
        "assigning variable spl_par_sym_dx");
      out__.write_free_lub(0, 1, spl_par_sym_dx);
      local_scalar_t__ inv_sqrt_phi_c = DUMMY_VAR__;
      current_statement__ = 14;
      inv_sqrt_phi_c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, inv_sqrt_phi_c);
      local_scalar_t__ inv_sqrt_phi_h = DUMMY_VAR__;
      current_statement__ = 15;
      inv_sqrt_phi_h = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, inv_sqrt_phi_h);
      Eigen::Matrix<local_scalar_t__,-1,1> prob_vac =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(prob_vac,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(3),
        "assigning variable prob_vac");
      out__.write_free_simplex(prob_vac);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log_infections_0",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "serial_i",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "spl_par_rt",
        "double", std::vector<size_t>{static_cast<size_t>(N_spl_par_rt)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "p_sym_if_inf",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "new_p_sym_if_inf",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "p_sev_if_sym",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "p_die_if_sev",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "ifr_decl_OR",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "scale_dx_delay_sym", "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "scale_dx_delay_sev", "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "rr_diag_asy_vs_sym", "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "p_diag_if_sev",
        "double", std::vector<size_t>{});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "spl_par_sym_dx",
        "double", std::vector<size_t>{static_cast<size_t>(N_spl_par_dx)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "inv_sqrt_phi_c",
        "double", std::vector<size_t>{});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "inv_sqrt_phi_h",
        "double", std::vector<size_t>{});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "prob_vac",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ log_infections_0 = DUMMY_VAR__;
      current_statement__ = 1;
      log_infections_0 = context__.vals_r("log_infections_0")[(1 - 1)];
      out__.write(log_infections_0);
      local_scalar_t__ serial_i = DUMMY_VAR__;
      current_statement__ = 2;
      serial_i = context__.vals_r("serial_i")[(1 - 1)];
      out__.write(serial_i);
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_rt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_rt,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> spl_par_rt_flat__;
        current_statement__ = 3;
        spl_par_rt_flat__ = context__.vals_r("spl_par_rt");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(spl_par_rt, spl_par_rt_flat__[(pos__ - 1)],
            "assigning variable spl_par_rt", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(spl_par_rt);
      local_scalar_t__ p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 4;
      p_sym_if_inf = context__.vals_r("p_sym_if_inf")[(1 - 1)];
      out__.write_free_lub(0, 1, p_sym_if_inf);
      local_scalar_t__ new_p_sym_if_inf = DUMMY_VAR__;
      current_statement__ = 5;
      new_p_sym_if_inf = context__.vals_r("new_p_sym_if_inf")[(1 - 1)];
      out__.write_free_lub(0, 1, new_p_sym_if_inf);
      local_scalar_t__ p_sev_if_sym = DUMMY_VAR__;
      current_statement__ = 6;
      p_sev_if_sym = context__.vals_r("p_sev_if_sym")[(1 - 1)];
      out__.write_free_lub(0, 1, p_sev_if_sym);
      local_scalar_t__ p_die_if_sev = DUMMY_VAR__;
      current_statement__ = 7;
      p_die_if_sev = context__.vals_r("p_die_if_sev")[(1 - 1)];
      out__.write_free_lub(0, 1, p_die_if_sev);
      local_scalar_t__ ifr_decl_OR = DUMMY_VAR__;
      current_statement__ = 8;
      ifr_decl_OR = context__.vals_r("ifr_decl_OR")[(1 - 1)];
      out__.write_free_lb(0, ifr_decl_OR);
      local_scalar_t__ scale_dx_delay_sym = DUMMY_VAR__;
      current_statement__ = 9;
      scale_dx_delay_sym = context__.vals_r("scale_dx_delay_sym")[(1 - 1)];
      out__.write_free_lub(0, 1, scale_dx_delay_sym);
      local_scalar_t__ scale_dx_delay_sev = DUMMY_VAR__;
      current_statement__ = 10;
      scale_dx_delay_sev = context__.vals_r("scale_dx_delay_sev")[(1 - 1)];
      out__.write_free_lub(0, 1, scale_dx_delay_sev);
      local_scalar_t__ rr_diag_asy_vs_sym = DUMMY_VAR__;
      current_statement__ = 11;
      rr_diag_asy_vs_sym = context__.vals_r("rr_diag_asy_vs_sym")[(1 - 1)];
      out__.write_free_lub(0, 1, rr_diag_asy_vs_sym);
      local_scalar_t__ p_diag_if_sev = DUMMY_VAR__;
      current_statement__ = 12;
      p_diag_if_sev = context__.vals_r("p_diag_if_sev")[(1 - 1)];
      out__.write_free_lub(0, 1, p_diag_if_sev);
      Eigen::Matrix<local_scalar_t__,-1,1> spl_par_sym_dx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_spl_par_dx,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> spl_par_sym_dx_flat__;
        current_statement__ = 13;
        spl_par_sym_dx_flat__ = context__.vals_r("spl_par_sym_dx");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(spl_par_sym_dx, spl_par_sym_dx_flat__[(pos__ -
            1)], "assigning variable spl_par_sym_dx",
            stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, spl_par_sym_dx);
      local_scalar_t__ inv_sqrt_phi_c = DUMMY_VAR__;
      current_statement__ = 14;
      inv_sqrt_phi_c = context__.vals_r("inv_sqrt_phi_c")[(1 - 1)];
      out__.write_free_lb(0, inv_sqrt_phi_c);
      local_scalar_t__ inv_sqrt_phi_h = DUMMY_VAR__;
      current_statement__ = 15;
      inv_sqrt_phi_h = context__.vals_r("inv_sqrt_phi_h")[(1 - 1)];
      out__.write_free_lb(0, inv_sqrt_phi_h);
      Eigen::Matrix<local_scalar_t__,-1,1> prob_vac =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> prob_vac_flat__;
        current_statement__ = 16;
        prob_vac_flat__ = context__.vals_r("prob_vac");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(prob_vac, prob_vac_flat__[(pos__ - 1)],
            "assigning variable prob_vac", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(prob_vac);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log_infections_0", "serial_i",
                "spl_par_rt", "p_sym_if_inf", "new_p_sym_if_inf",
                "p_sev_if_sym", "p_die_if_sev", "ifr_decl_OR",
                "scale_dx_delay_sym", "scale_dx_delay_sev",
                "rr_diag_asy_vs_sym", "p_diag_if_sev", "spl_par_sym_dx",
                "inv_sqrt_phi_c", "inv_sqrt_phi_h", "prob_vac"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"log_infections", "deriv1_log_infections", "infections",
             "ever_inf", "susceptible_prvl", "population_protection_init",
             "population_protection_inf", "population_protection_boost",
             "effective_protection_prvl", "logRt0", "logRt", "r_t",
             "deriv1_spl_par_rt", "deriv2_spl_par_rt", "p_die_if_sevt",
             "p_sev_if_symt", "p_sym_if_inft", "rr_diag_sym_vs_sev",
             "p_diag_if_asy", "p_diag_if_sym", "sym_diag_delay_rv",
             "sev_diag_delay_rv", "p_die_if_inf", "symptomatic", "severe",
             "deaths", "new_asy_dx", "diagnoses_of_symptomatic",
             "diagnoses_severe", "dx_sym_sev", "dx_sym_die", "dx_sev_die",
             "diagnoses", "deaths_of_diagnosed", "fitted_cases",
             "fitted_hospitalizations", "fitted_deaths", "fitted_cases_mvs",
             "fitted_hospitalizations_mvs", "fitted_deaths_mvs", "phi_cas",
             "phi_hosp"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"infections_premiere", "num_uninf", "p_die_if_sym",
             "susceptible_severe_prvl", "effective_protection_inf_prvl",
             "effective_protection_inf_vax_prvl",
             "effective_protection_inf_vax_boost_prvl",
             "effective_protection_vax_prvl",
             "effective_protection_vax_boost_prvl", "fitted_wastewater_prvl",
             "immunoexposed_cumulative", "diag_cases",
             "infections_cumulative", "seropositive_prvl", "infect_dist_rv",
             "seropos_dist_rv"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_spl_par_rt)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_spl_par_dx)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(3)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(deriv1_spl_par_rt_1dim__)},
             std::vector<size_t>{static_cast<size_t>(deriv2_spl_par_rt_1dim__)},
             std::vector<size_t>{static_cast<size_t>(N_ifr_adj)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(Max_delay)},
             std::vector<size_t>{static_cast<size_t>(Max_delay)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(N_weeks_tot)},
             std::vector<size_t>{static_cast<size_t>(Max_delay)},
             std::vector<size_t>{static_cast<size_t>(Max_delay)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "log_infections_0");
    param_names__.emplace_back(std::string() + "serial_i");
    for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
      param_names__.emplace_back(std::string() + "spl_par_rt" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p_sym_if_inf");
    param_names__.emplace_back(std::string() + "new_p_sym_if_inf");
    param_names__.emplace_back(std::string() + "p_sev_if_sym");
    param_names__.emplace_back(std::string() + "p_die_if_sev");
    param_names__.emplace_back(std::string() + "ifr_decl_OR");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sym");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sev");
    param_names__.emplace_back(std::string() + "rr_diag_asy_vs_sym");
    param_names__.emplace_back(std::string() + "p_diag_if_sev");
    for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
      param_names__.emplace_back(std::string() + "spl_par_sym_dx" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_c");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_h");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "prob_vac" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_infections" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv1_log_infections" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "ever_inf");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "susceptible_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_init" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_inf" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_boost" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "logRt0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "logRt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= deriv1_spl_par_rt_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv1_spl_par_rt" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= deriv2_spl_par_rt_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv2_spl_par_rt" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_die_if_sevt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_sev_if_symt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_sym_if_inft" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "rr_diag_sym_vs_sev" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_diag_if_asy" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_diag_if_sym" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "sym_diag_delay_rv" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "sev_diag_delay_rv" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p_die_if_inf");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "symptomatic" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "severe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deaths" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "new_asy_dx" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses_of_symptomatic"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses_severe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sym_sev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sym_die" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sev_die" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deaths_of_diagnosed" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_hospitalizations"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_deaths" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_cases_mvs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "fitted_hospitalizations_mvs" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_deaths_mvs" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "phi_cas");
      param_names__.emplace_back(std::string() + "phi_hosp");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections_premiere" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "num_uninf" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p_die_if_sym");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "susceptible_severe_prvl"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_vax_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_vax_boost_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_vax_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_vax_boost_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_wastewater_prvl" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "immunoexposed_cumulative"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diag_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections_cumulative" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "seropositive_prvl" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "infect_dist_rv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "seropos_dist_rv" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "log_infections_0");
    param_names__.emplace_back(std::string() + "serial_i");
    for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
      param_names__.emplace_back(std::string() + "spl_par_rt" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p_sym_if_inf");
    param_names__.emplace_back(std::string() + "new_p_sym_if_inf");
    param_names__.emplace_back(std::string() + "p_sev_if_sym");
    param_names__.emplace_back(std::string() + "p_die_if_sev");
    param_names__.emplace_back(std::string() + "ifr_decl_OR");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sym");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sev");
    param_names__.emplace_back(std::string() + "rr_diag_asy_vs_sym");
    param_names__.emplace_back(std::string() + "p_diag_if_sev");
    for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
      param_names__.emplace_back(std::string() + "spl_par_sym_dx" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_c");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_h");
    for (int sym1__ = 1; sym1__ <= (3 - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "prob_vac" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_infections" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv1_log_infections" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "ever_inf");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "susceptible_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_init" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_inf" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "population_protection_boost" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "logRt0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "logRt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= deriv1_spl_par_rt_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv1_spl_par_rt" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= deriv2_spl_par_rt_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "deriv2_spl_par_rt" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_die_if_sevt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_sev_if_symt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_sym_if_inft" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "rr_diag_sym_vs_sev" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_diag_if_asy" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_diag_if_sym" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "sym_diag_delay_rv" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "sev_diag_delay_rv" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p_die_if_inf");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "symptomatic" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "severe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deaths" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "new_asy_dx" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses_of_symptomatic"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses_severe" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sym_sev" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sym_die" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "dx_sev_die" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diagnoses" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "deaths_of_diagnosed" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_hospitalizations"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_deaths" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_cases_mvs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "fitted_hospitalizations_mvs" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_deaths_mvs" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "phi_cas");
      param_names__.emplace_back(std::string() + "phi_hosp");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections_premiere" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "num_uninf" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p_die_if_sym");
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "susceptible_severe_prvl"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_vax_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_inf_vax_boost_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_vax_prvl" + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() +
          "effective_protection_vax_boost_prvl" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "fitted_wastewater_prvl" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "immunoexposed_cumulative"
          + '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "diag_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections_cumulative" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_weeks_tot; ++sym1__) {
        param_names__.emplace_back(std::string() + "seropositive_prvl" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "infect_dist_rv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        param_names__.emplace_back(std::string() + "seropos_dist_rv" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_infections_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serial_i\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_rt) + "},\"block\":\"parameters\"},{\"name\":\"p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"new_p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_sev_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_die_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ifr_decl_OR\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rr_diag_asy_vs_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_diag_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_dx) + "},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"log_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_log_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ever_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"susceptible_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_boost\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effective_protection_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv1_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv2_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv2_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_sevt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ifr_adj) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sev_if_symt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sym_if_inft\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rr_diag_sym_vs_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_asy\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sym_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sev_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"symptomatic\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"severe\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deaths\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_asy_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses_of_symptomatic\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses_severe\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sev_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deaths_of_diagnosed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_hospitalizations\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_deaths\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_cases_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_hospitalizations_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_deaths_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_cas\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_hosp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"infections_premiere\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"num_uninf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_die_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"susceptible_severe_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_vax_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_vax_boost_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_vax_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_vax_boost_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_wastewater_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immunoexposed_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infections_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropositive_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infect_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropos_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log_infections_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serial_i\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_rt) + "},\"block\":\"parameters\"},{\"name\":\"p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"new_p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_sev_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_die_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ifr_decl_OR\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rr_diag_asy_vs_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_diag_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_dx) + "},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((3 -1)) + "},\"block\":\"parameters\"},{\"name\":\"log_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_log_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ever_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"susceptible_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"population_protection_boost\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effective_protection_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv1_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv2_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv2_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_sevt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ifr_adj) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sev_if_symt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sym_if_inft\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rr_diag_sym_vs_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_asy\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sym_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sev_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"symptomatic\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"severe\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deaths\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_asy_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses_of_symptomatic\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses_severe\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sev_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diagnoses\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deaths_of_diagnosed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_hospitalizations\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_deaths\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_cases_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_hospitalizations_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fitted_deaths_mvs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_cas\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_hosp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"infections_premiere\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"num_uninf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_die_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"susceptible_severe_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_vax_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_inf_vax_boost_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_vax_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"effective_protection_vax_boost_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"fitted_wastewater_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immunoexposed_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"diag_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infections_cumulative\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropositive_prvl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_weeks_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infect_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropos_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((1 + 1) + N_spl_par_rt) + 1) +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + N_spl_par_dx) + 1) + 1) + 3);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((((((((((((((((((((((((N_weeks_tot + N_weeks_tot) +
      N_weeks_tot) + 1) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + deriv1_spl_par_rt_1dim__) + deriv2_spl_par_rt_1dim__) +
      N_ifr_adj) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot)
      + N_weeks_tot) + Max_delay) + Max_delay) + 1) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((((N_weeks_tot + N_weeks_tot) + 1) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + Max_delay) + Max_delay));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((1 + 1) + N_spl_par_rt) + 1) +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + N_spl_par_dx) + 1) + 1) + 3);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((((((((((((((((((((((((N_weeks_tot + N_weeks_tot) +
      N_weeks_tot) + 1) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + deriv1_spl_par_rt_1dim__) + deriv2_spl_par_rt_1dim__) +
      N_ifr_adj) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot)
      + N_weeks_tot) + Max_delay) + Max_delay) + 1) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((((((N_weeks_tot + N_weeks_tot) + 1) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + N_weeks_tot) + N_weeks_tot) +
      N_weeks_tot) + N_weeks_tot) + Max_delay) + Max_delay));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_stan_program_default_namespace::model_stan_program_default;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_stan_program_default_namespace::profiles__;
}
#endif
#endif
